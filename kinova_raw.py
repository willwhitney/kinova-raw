# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _kinova_raw
else:
    import _kinova_raw

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


JOYSTICK_BUTTON_COUNT = _kinova_raw.JOYSTICK_BUTTON_COUNT

NB_ADVANCE_RETRACT_POSITION = _kinova_raw.NB_ADVANCE_RETRACT_POSITION

ERROR_DATA_COUNT_MAX = _kinova_raw.ERROR_DATA_COUNT_MAX

ERROR_LAYER_COUNT = _kinova_raw.ERROR_LAYER_COUNT

LEGACY_CONFIG_NB_ZONES_MAX = _kinova_raw.LEGACY_CONFIG_NB_ZONES_MAX

LEGACY_CONFIG_NB_POINTS_COUNT = _kinova_raw.LEGACY_CONFIG_NB_POINTS_COUNT

CONTROL_MAPPING_COUNT = _kinova_raw.CONTROL_MAPPING_COUNT

MODE_MAP_COUNT = _kinova_raw.MODE_MAP_COUNT

STICK_EVENT_COUNT = _kinova_raw.STICK_EVENT_COUNT

BUTTON_EVENT_COUNT = _kinova_raw.BUTTON_EVENT_COUNT

STRING_LENGTH = _kinova_raw.STRING_LENGTH

JACO_FINGERS_COUNT = _kinova_raw.JACO_FINGERS_COUNT

ERROR_UNKNOWFILE = _kinova_raw.ERROR_UNKNOWFILE

ERROR_MEMORY = _kinova_raw.ERROR_MEMORY

ERROR_FILEREADING = _kinova_raw.ERROR_FILEREADING

NOMOVEMENT_POSITION = _kinova_raw.NOMOVEMENT_POSITION

CARTESIAN_POSITION = _kinova_raw.CARTESIAN_POSITION

ANGULAR_POSITION = _kinova_raw.ANGULAR_POSITION

RETRACTED = _kinova_raw.RETRACTED

PREDEFINED1 = _kinova_raw.PREDEFINED1

PREDEFINED2 = _kinova_raw.PREDEFINED2

PREDEFINED3 = _kinova_raw.PREDEFINED3

CARTESIAN_VELOCITY = _kinova_raw.CARTESIAN_VELOCITY

ANGULAR_VELOCITY = _kinova_raw.ANGULAR_VELOCITY

PREDEFINED4 = _kinova_raw.PREDEFINED4

PREDEFINED5 = _kinova_raw.PREDEFINED5

ANY_TRAJECTORY = _kinova_raw.ANY_TRAJECTORY

TIME_DELAY = _kinova_raw.TIME_DELAY

PERIPHERAL_PORT_ANY = _kinova_raw.PERIPHERAL_PORT_ANY

PERIPHERAL_PORT_CAN_INTERNAL = _kinova_raw.PERIPHERAL_PORT_CAN_INTERNAL

PERIPHERAL_PORT_PORT_CAN_EXTERNAL = _kinova_raw.PERIPHERAL_PORT_PORT_CAN_EXTERNAL

PERIPHERAL_PORT_PORT_SPI_0 = _kinova_raw.PERIPHERAL_PORT_PORT_SPI_0

PERIPHERAL_PORT_PORT_SPI_1 = _kinova_raw.PERIPHERAL_PORT_PORT_SPI_1

PERIPHERAL_PORT_PORT_USB = _kinova_raw.PERIPHERAL_PORT_PORT_USB

PERIPHERAL_PORT_PORT_UART_0 = _kinova_raw.PERIPHERAL_PORT_PORT_UART_0

PERIPHERAL_PORT_PORT_UART_1 = _kinova_raw.PERIPHERAL_PORT_PORT_UART_1

PERIPHERAL_PORT_PORT_UART_2 = _kinova_raw.PERIPHERAL_PORT_PORT_UART_2

PERIPHERAL_PORT_PORT_VIRTUAL = _kinova_raw.PERIPHERAL_PORT_PORT_VIRTUAL

PERIPHERAL_TYPE_NONE = _kinova_raw.PERIPHERAL_TYPE_NONE

PERIPHERAL_TYPE_ANY = _kinova_raw.PERIPHERAL_TYPE_ANY

PERIPHERAL_TYPE_UNKNOWN = _kinova_raw.PERIPHERAL_TYPE_UNKNOWN

PERIPHERAL_TYPE_ACTUATOR_GENERIC = _kinova_raw.PERIPHERAL_TYPE_ACTUATOR_GENERIC

PERIPHERAL_TYPE_ACTUATOR_BIG_19NM = _kinova_raw.PERIPHERAL_TYPE_ACTUATOR_BIG_19NM

PERIPHERAL_TYPE_ACTUATOR_BIG_37NM = _kinova_raw.PERIPHERAL_TYPE_ACTUATOR_BIG_37NM

PERIPHERAL_TYPE_ACTUATOR_SMALL_7NM = _kinova_raw.PERIPHERAL_TYPE_ACTUATOR_SMALL_7NM

PERIPHERAL_TYPE_LINEAR_ACTUATOR_GENERIC = _kinova_raw.PERIPHERAL_TYPE_LINEAR_ACTUATOR_GENERIC

PERIPHERAL_TYPE_LINEAR_ACTUATOR_120N = _kinova_raw.PERIPHERAL_TYPE_LINEAR_ACTUATOR_120N

PERIPHERAL_TYPE_JOYSTICK = _kinova_raw.PERIPHERAL_TYPE_JOYSTICK

PERIPHERAL_TYPE_VIRTUAL_JOYSTICK = _kinova_raw.PERIPHERAL_TYPE_VIRTUAL_JOYSTICK

PERIPHERAL_TYPE_KINOVA_JOYSTICK_3AXIS = _kinova_raw.PERIPHERAL_TYPE_KINOVA_JOYSTICK_3AXIS

PERIPHERAL_TYPE_UNIVERSAL_INTERFACE_V2 = _kinova_raw.PERIPHERAL_TYPE_UNIVERSAL_INTERFACE_V2

PERIPHERAL_TYPE_CAN_INTERFACE = _kinova_raw.PERIPHERAL_TYPE_CAN_INTERFACE

HAND_NOMOVEMENT = _kinova_raw.HAND_NOMOVEMENT

POSITION_MODE = _kinova_raw.POSITION_MODE

VELOCITY_MODE = _kinova_raw.VELOCITY_MODE

RIGHTHAND = _kinova_raw.RIGHTHAND

LEFTHAND = _kinova_raw.LEFTHAND

THREE_AXIS_JOYSTICK = _kinova_raw.THREE_AXIS_JOYSTICK

TWO_AXIS_JOYSTICK = _kinova_raw.TWO_AXIS_JOYSTICK

API = _kinova_raw.API

EASY_RIDER = _kinova_raw.EASY_RIDER

UNIVERSAL_INTERFACE = _kinova_raw.UNIVERSAL_INTERFACE

EXTERNAL_CUSTOMINTERFACE = _kinova_raw.EXTERNAL_CUSTOMINTERFACE

NONE = _kinova_raw.NONE

OLED_DISPLAY = _kinova_raw.OLED_DISPLAY

CONTROL_TYPE_CARTESIAN = _kinova_raw.CONTROL_TYPE_CARTESIAN

CONTROL_TYPE_ANGULAR = _kinova_raw.CONTROL_TYPE_ANGULAR

CONTROL_TYPE_UNKNOWN = _kinova_raw.CONTROL_TYPE_UNKNOWN

CONTROL_MODULE_NONE = _kinova_raw.CONTROL_MODULE_NONE

CONTROL_MODULE_ANGULAR_VELOCITY = _kinova_raw.CONTROL_MODULE_ANGULAR_VELOCITY

CONTROL_MODULE_ANGULAR_POSITION = _kinova_raw.CONTROL_MODULE_ANGULAR_POSITION

CONTROL_MODULE_CARTESIAN_VELOCITY = _kinova_raw.CONTROL_MODULE_CARTESIAN_VELOCITY

CONTROL_MODULE_CARTESIAN_POSITION = _kinova_raw.CONTROL_MODULE_CARTESIAN_POSITION

CONTROL_MODULE_RETRACT = _kinova_raw.CONTROL_MODULE_RETRACT

CONTROL_MODULE_TRAJECTORY = _kinova_raw.CONTROL_MODULE_TRAJECTORY

CONTROL_MODULE_PREDEFINED = _kinova_raw.CONTROL_MODULE_PREDEFINED

CONTROL_MODULE_TIMEDELAY = _kinova_raw.CONTROL_MODULE_TIMEDELAY

RETRACT_TYPE_NORMAL_TO_READY = _kinova_raw.RETRACT_TYPE_NORMAL_TO_READY

RETRACT_TYPE_READY_STANDBY = _kinova_raw.RETRACT_TYPE_READY_STANDBY

RETRACT_TYPE_READY_TO_RETRACT = _kinova_raw.RETRACT_TYPE_READY_TO_RETRACT

RETRACT_TYPE_RETRACT_STANDBY = _kinova_raw.RETRACT_TYPE_RETRACT_STANDBY

RETRACT_TYPE_RETRACT_TO_READY = _kinova_raw.RETRACT_TYPE_RETRACT_TO_READY

RETRACT_TYPE_NORMAL_STANDBY = _kinova_raw.RETRACT_TYPE_NORMAL_STANDBY

RETRACT_TYPE_NOT_INITIALIZED = _kinova_raw.RETRACT_TYPE_NOT_INITIALIZED

RETRACT_ERROR = _kinova_raw.RETRACT_ERROR

class AngularInfo(object):
    r"""Proxy of C++ AngularInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    Actuator1 = property(_kinova_raw.AngularInfo_Actuator1_get, _kinova_raw.AngularInfo_Actuator1_set, doc=r"""Actuator1 : float""")
    Actuator2 = property(_kinova_raw.AngularInfo_Actuator2_get, _kinova_raw.AngularInfo_Actuator2_set, doc=r"""Actuator2 : float""")
    Actuator3 = property(_kinova_raw.AngularInfo_Actuator3_get, _kinova_raw.AngularInfo_Actuator3_set, doc=r"""Actuator3 : float""")
    Actuator4 = property(_kinova_raw.AngularInfo_Actuator4_get, _kinova_raw.AngularInfo_Actuator4_set, doc=r"""Actuator4 : float""")
    Actuator5 = property(_kinova_raw.AngularInfo_Actuator5_get, _kinova_raw.AngularInfo_Actuator5_set, doc=r"""Actuator5 : float""")
    Actuator6 = property(_kinova_raw.AngularInfo_Actuator6_get, _kinova_raw.AngularInfo_Actuator6_set, doc=r"""Actuator6 : float""")

    def InitStruct(self) -> "void":
        r"""InitStruct(AngularInfo self)"""
        return _kinova_raw.AngularInfo_InitStruct(self)

    def __repr__(self) -> "char *":
        r"""__repr__(AngularInfo self) -> char *"""
        return _kinova_raw.AngularInfo___repr__(self)

    def __len__(self) -> "int":
        r"""__len__(AngularInfo self) -> int"""
        return _kinova_raw.AngularInfo___len__(self)

    def __getitem__(self, i: 'int') -> "float":
        r"""__getitem__(AngularInfo self, int i) -> float"""
        return _kinova_raw.AngularInfo___getitem__(self, i)

    def __setitem__(self, i: 'int', angle: 'float') -> "void":
        r"""__setitem__(AngularInfo self, int i, float angle)"""
        return _kinova_raw.AngularInfo___setitem__(self, i, angle)

    def __init__(self):
        r"""__init__(AngularInfo self) -> AngularInfo"""
        _kinova_raw.AngularInfo_swiginit(self, _kinova_raw.new_AngularInfo())
    __swig_destroy__ = _kinova_raw.delete_AngularInfo

# Register AngularInfo in _kinova_raw:
_kinova_raw.AngularInfo_swigregister(AngularInfo)
cvar = _kinova_raw.cvar
PAGE_SIZE = cvar.PAGE_SIZE
ADDRESS_PAGE_SIZE = cvar.ADDRESS_PAGE_SIZE
PACKET_PER_PAGE_QTY = cvar.PACKET_PER_PAGE_QTY
PAGEPACKET_SIZE = cvar.PAGEPACKET_SIZE
USB_HEADER_SIZE = cvar.USB_HEADER_SIZE
USB_DATA_SIZE = cvar.USB_DATA_SIZE

class CartesianInfo(object):
    r"""Proxy of C++ CartesianInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    X = property(_kinova_raw.CartesianInfo_X_get, _kinova_raw.CartesianInfo_X_set, doc=r"""X : float""")
    Y = property(_kinova_raw.CartesianInfo_Y_get, _kinova_raw.CartesianInfo_Y_set, doc=r"""Y : float""")
    Z = property(_kinova_raw.CartesianInfo_Z_get, _kinova_raw.CartesianInfo_Z_set, doc=r"""Z : float""")
    ThetaX = property(_kinova_raw.CartesianInfo_ThetaX_get, _kinova_raw.CartesianInfo_ThetaX_set, doc=r"""ThetaX : float""")
    ThetaY = property(_kinova_raw.CartesianInfo_ThetaY_get, _kinova_raw.CartesianInfo_ThetaY_set, doc=r"""ThetaY : float""")
    ThetaZ = property(_kinova_raw.CartesianInfo_ThetaZ_get, _kinova_raw.CartesianInfo_ThetaZ_set, doc=r"""ThetaZ : float""")

    def InitStruct(self) -> "void":
        r"""InitStruct(CartesianInfo self)"""
        return _kinova_raw.CartesianInfo_InitStruct(self)

    def __repr__(self) -> "char *":
        r"""__repr__(CartesianInfo self) -> char *"""
        return _kinova_raw.CartesianInfo___repr__(self)

    def __len__(self) -> "int":
        r"""__len__(CartesianInfo self) -> int"""
        return _kinova_raw.CartesianInfo___len__(self)

    def __getitem__(self, i: 'int') -> "float":
        r"""__getitem__(CartesianInfo self, int i) -> float"""
        return _kinova_raw.CartesianInfo___getitem__(self, i)

    def __setitem__(self, i: 'int', position: 'float') -> "void":
        r"""__setitem__(CartesianInfo self, int i, float position)"""
        return _kinova_raw.CartesianInfo___setitem__(self, i, position)

    def __init__(self):
        r"""__init__(CartesianInfo self) -> CartesianInfo"""
        _kinova_raw.CartesianInfo_swiginit(self, _kinova_raw.new_CartesianInfo())
    __swig_destroy__ = _kinova_raw.delete_CartesianInfo

# Register CartesianInfo in _kinova_raw:
_kinova_raw.CartesianInfo_swigregister(CartesianInfo)

class SensorsInfo(object):
    r"""Proxy of C++ SensorsInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Voltage = property(_kinova_raw.SensorsInfo_Voltage_get, _kinova_raw.SensorsInfo_Voltage_set, doc=r"""Voltage : float""")
    Current = property(_kinova_raw.SensorsInfo_Current_get, _kinova_raw.SensorsInfo_Current_set, doc=r"""Current : float""")
    AccelerationX = property(_kinova_raw.SensorsInfo_AccelerationX_get, _kinova_raw.SensorsInfo_AccelerationX_set, doc=r"""AccelerationX : float""")
    AccelerationY = property(_kinova_raw.SensorsInfo_AccelerationY_get, _kinova_raw.SensorsInfo_AccelerationY_set, doc=r"""AccelerationY : float""")
    AccelerationZ = property(_kinova_raw.SensorsInfo_AccelerationZ_get, _kinova_raw.SensorsInfo_AccelerationZ_set, doc=r"""AccelerationZ : float""")
    ActuatorTemp1 = property(_kinova_raw.SensorsInfo_ActuatorTemp1_get, _kinova_raw.SensorsInfo_ActuatorTemp1_set, doc=r"""ActuatorTemp1 : float""")
    ActuatorTemp2 = property(_kinova_raw.SensorsInfo_ActuatorTemp2_get, _kinova_raw.SensorsInfo_ActuatorTemp2_set, doc=r"""ActuatorTemp2 : float""")
    ActuatorTemp3 = property(_kinova_raw.SensorsInfo_ActuatorTemp3_get, _kinova_raw.SensorsInfo_ActuatorTemp3_set, doc=r"""ActuatorTemp3 : float""")
    ActuatorTemp4 = property(_kinova_raw.SensorsInfo_ActuatorTemp4_get, _kinova_raw.SensorsInfo_ActuatorTemp4_set, doc=r"""ActuatorTemp4 : float""")
    ActuatorTemp5 = property(_kinova_raw.SensorsInfo_ActuatorTemp5_get, _kinova_raw.SensorsInfo_ActuatorTemp5_set, doc=r"""ActuatorTemp5 : float""")
    ActuatorTemp6 = property(_kinova_raw.SensorsInfo_ActuatorTemp6_get, _kinova_raw.SensorsInfo_ActuatorTemp6_set, doc=r"""ActuatorTemp6 : float""")
    FingerTemp1 = property(_kinova_raw.SensorsInfo_FingerTemp1_get, _kinova_raw.SensorsInfo_FingerTemp1_set, doc=r"""FingerTemp1 : float""")
    FingerTemp2 = property(_kinova_raw.SensorsInfo_FingerTemp2_get, _kinova_raw.SensorsInfo_FingerTemp2_set, doc=r"""FingerTemp2 : float""")
    FingerTemp3 = property(_kinova_raw.SensorsInfo_FingerTemp3_get, _kinova_raw.SensorsInfo_FingerTemp3_set, doc=r"""FingerTemp3 : float""")

    def InitStruct(self) -> "void":
        r"""InitStruct(SensorsInfo self)"""
        return _kinova_raw.SensorsInfo_InitStruct(self)

    def __init__(self):
        r"""__init__(SensorsInfo self) -> SensorsInfo"""
        _kinova_raw.SensorsInfo_swiginit(self, _kinova_raw.new_SensorsInfo())
    __swig_destroy__ = _kinova_raw.delete_SensorsInfo

# Register SensorsInfo in _kinova_raw:
_kinova_raw.SensorsInfo_swigregister(SensorsInfo)

class FingersPosition(object):
    r"""Proxy of C++ FingersPosition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    Finger1 = property(_kinova_raw.FingersPosition_Finger1_get, _kinova_raw.FingersPosition_Finger1_set, doc=r"""Finger1 : float""")
    Finger2 = property(_kinova_raw.FingersPosition_Finger2_get, _kinova_raw.FingersPosition_Finger2_set, doc=r"""Finger2 : float""")
    Finger3 = property(_kinova_raw.FingersPosition_Finger3_get, _kinova_raw.FingersPosition_Finger3_set, doc=r"""Finger3 : float""")

    def InitStruct(self) -> "void":
        r"""InitStruct(FingersPosition self)"""
        return _kinova_raw.FingersPosition_InitStruct(self)

    def __repr__(self) -> "char *":
        r"""__repr__(FingersPosition self) -> char *"""
        return _kinova_raw.FingersPosition___repr__(self)

    def __len__(self) -> "int":
        r"""__len__(FingersPosition self) -> int"""
        return _kinova_raw.FingersPosition___len__(self)

    def __getitem__(self, i: 'int') -> "float":
        r"""__getitem__(FingersPosition self, int i) -> float"""
        return _kinova_raw.FingersPosition___getitem__(self, i)

    def __setitem__(self, i: 'int', position: 'float') -> "void":
        r"""__setitem__(FingersPosition self, int i, float position)"""
        return _kinova_raw.FingersPosition___setitem__(self, i, position)

    def __init__(self):
        r"""__init__(FingersPosition self) -> FingersPosition"""
        _kinova_raw.FingersPosition_swiginit(self, _kinova_raw.new_FingersPosition())
    __swig_destroy__ = _kinova_raw.delete_FingersPosition

# Register FingersPosition in _kinova_raw:
_kinova_raw.FingersPosition_swigregister(FingersPosition)

class CartesianPosition(object):
    r"""Proxy of C++ CartesianPosition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    Coordinates = property(_kinova_raw.CartesianPosition_Coordinates_get, _kinova_raw.CartesianPosition_Coordinates_set, doc=r"""Coordinates : CartesianInfo""")
    Fingers = property(_kinova_raw.CartesianPosition_Fingers_get, _kinova_raw.CartesianPosition_Fingers_set, doc=r"""Fingers : FingersPosition""")

    def InitStruct(self) -> "void":
        r"""InitStruct(CartesianPosition self)"""
        return _kinova_raw.CartesianPosition_InitStruct(self)

    def __repr__(self) -> "char *":
        r"""__repr__(CartesianPosition self) -> char *"""
        return _kinova_raw.CartesianPosition___repr__(self)

    def __init__(self):
        r"""__init__(CartesianPosition self) -> CartesianPosition"""
        _kinova_raw.CartesianPosition_swiginit(self, _kinova_raw.new_CartesianPosition())
    __swig_destroy__ = _kinova_raw.delete_CartesianPosition

# Register CartesianPosition in _kinova_raw:
_kinova_raw.CartesianPosition_swigregister(CartesianPosition)

class AngularPosition(object):
    r"""Proxy of C++ AngularPosition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    Actuators = property(_kinova_raw.AngularPosition_Actuators_get, _kinova_raw.AngularPosition_Actuators_set, doc=r"""Actuators : AngularInfo""")
    Fingers = property(_kinova_raw.AngularPosition_Fingers_get, _kinova_raw.AngularPosition_Fingers_set, doc=r"""Fingers : FingersPosition""")

    def InitStruct(self) -> "void":
        r"""InitStruct(AngularPosition self)"""
        return _kinova_raw.AngularPosition_InitStruct(self)

    def __repr__(self) -> "char *":
        r"""__repr__(AngularPosition self) -> char *"""
        return _kinova_raw.AngularPosition___repr__(self)

    def __init__(self):
        r"""__init__(AngularPosition self) -> AngularPosition"""
        _kinova_raw.AngularPosition_swiginit(self, _kinova_raw.new_AngularPosition())
    __swig_destroy__ = _kinova_raw.delete_AngularPosition

# Register AngularPosition in _kinova_raw:
_kinova_raw.AngularPosition_swigregister(AngularPosition)

class Limitation(object):
    r"""Proxy of C++ Limitation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    speedParameter1 = property(_kinova_raw.Limitation_speedParameter1_get, _kinova_raw.Limitation_speedParameter1_set, doc=r"""speedParameter1 : float""")
    speedParameter2 = property(_kinova_raw.Limitation_speedParameter2_get, _kinova_raw.Limitation_speedParameter2_set, doc=r"""speedParameter2 : float""")
    speedParameter3 = property(_kinova_raw.Limitation_speedParameter3_get, _kinova_raw.Limitation_speedParameter3_set, doc=r"""speedParameter3 : float""")
    forceParameter1 = property(_kinova_raw.Limitation_forceParameter1_get, _kinova_raw.Limitation_forceParameter1_set, doc=r"""forceParameter1 : float""")
    forceParameter2 = property(_kinova_raw.Limitation_forceParameter2_get, _kinova_raw.Limitation_forceParameter2_set, doc=r"""forceParameter2 : float""")
    forceParameter3 = property(_kinova_raw.Limitation_forceParameter3_get, _kinova_raw.Limitation_forceParameter3_set, doc=r"""forceParameter3 : float""")
    accelerationParameter1 = property(_kinova_raw.Limitation_accelerationParameter1_get, _kinova_raw.Limitation_accelerationParameter1_set, doc=r"""accelerationParameter1 : float""")
    accelerationParameter2 = property(_kinova_raw.Limitation_accelerationParameter2_get, _kinova_raw.Limitation_accelerationParameter2_set, doc=r"""accelerationParameter2 : float""")
    accelerationParameter3 = property(_kinova_raw.Limitation_accelerationParameter3_get, _kinova_raw.Limitation_accelerationParameter3_set, doc=r"""accelerationParameter3 : float""")

    def InitStruct(self) -> "void":
        r"""InitStruct(Limitation self)"""
        return _kinova_raw.Limitation_InitStruct(self)

    def __init__(self):
        r"""__init__(Limitation self) -> Limitation"""
        _kinova_raw.Limitation_swiginit(self, _kinova_raw.new_Limitation())
    __swig_destroy__ = _kinova_raw.delete_Limitation

# Register Limitation in _kinova_raw:
_kinova_raw.Limitation_swigregister(Limitation)

class UserPosition(object):
    r"""Proxy of C++ UserPosition class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Type = property(_kinova_raw.UserPosition_Type_get, _kinova_raw.UserPosition_Type_set, doc=r"""Type : POSITION_TYPE""")
    Delay = property(_kinova_raw.UserPosition_Delay_get, _kinova_raw.UserPosition_Delay_set, doc=r"""Delay : float""")
    CartesianPosition = property(_kinova_raw.UserPosition_CartesianPosition_get, _kinova_raw.UserPosition_CartesianPosition_set, doc=r"""CartesianPosition : CartesianInfo""")
    Actuators = property(_kinova_raw.UserPosition_Actuators_get, _kinova_raw.UserPosition_Actuators_set, doc=r"""Actuators : AngularInfo""")
    HandMode = property(_kinova_raw.UserPosition_HandMode_get, _kinova_raw.UserPosition_HandMode_set, doc=r"""HandMode : HAND_MODE""")
    Fingers = property(_kinova_raw.UserPosition_Fingers_get, _kinova_raw.UserPosition_Fingers_set, doc=r"""Fingers : FingersPosition""")

    def InitStruct(self) -> "void":
        r"""InitStruct(UserPosition self)"""
        return _kinova_raw.UserPosition_InitStruct(self)

    def __init__(self):
        r"""__init__(UserPosition self) -> UserPosition"""
        _kinova_raw.UserPosition_swiginit(self, _kinova_raw.new_UserPosition())
    __swig_destroy__ = _kinova_raw.delete_UserPosition

# Register UserPosition in _kinova_raw:
_kinova_raw.UserPosition_swigregister(UserPosition)

class TrajectoryPoint(object):
    r"""Proxy of C++ TrajectoryPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Position = property(_kinova_raw.TrajectoryPoint_Position_get, _kinova_raw.TrajectoryPoint_Position_set, doc=r"""Position : UserPosition""")
    LimitationsActive = property(_kinova_raw.TrajectoryPoint_LimitationsActive_get, _kinova_raw.TrajectoryPoint_LimitationsActive_set, doc=r"""LimitationsActive : int""")
    SynchroType = property(_kinova_raw.TrajectoryPoint_SynchroType_get, _kinova_raw.TrajectoryPoint_SynchroType_set, doc=r"""SynchroType : int""")
    Limitations = property(_kinova_raw.TrajectoryPoint_Limitations_get, _kinova_raw.TrajectoryPoint_Limitations_set, doc=r"""Limitations : Limitation""")

    def InitStruct(self) -> "void":
        r"""InitStruct(TrajectoryPoint self)"""
        return _kinova_raw.TrajectoryPoint_InitStruct(self)

    def __init__(self):
        r"""__init__(TrajectoryPoint self) -> TrajectoryPoint"""
        _kinova_raw.TrajectoryPoint_swiginit(self, _kinova_raw.new_TrajectoryPoint())
    __swig_destroy__ = _kinova_raw.delete_TrajectoryPoint

# Register TrajectoryPoint in _kinova_raw:
_kinova_raw.TrajectoryPoint_swigregister(TrajectoryPoint)

class TrajectoryFIFO(object):
    r"""Proxy of C++ TrajectoryFIFO class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TrajectoryCount = property(_kinova_raw.TrajectoryFIFO_TrajectoryCount_get, _kinova_raw.TrajectoryFIFO_TrajectoryCount_set, doc=r"""TrajectoryCount : unsigned int""")
    UsedPercentage = property(_kinova_raw.TrajectoryFIFO_UsedPercentage_get, _kinova_raw.TrajectoryFIFO_UsedPercentage_set, doc=r"""UsedPercentage : float""")
    MaxSize = property(_kinova_raw.TrajectoryFIFO_MaxSize_get, _kinova_raw.TrajectoryFIFO_MaxSize_set, doc=r"""MaxSize : unsigned int""")

    def __init__(self):
        r"""__init__(TrajectoryFIFO self) -> TrajectoryFIFO"""
        _kinova_raw.TrajectoryFIFO_swiginit(self, _kinova_raw.new_TrajectoryFIFO())
    __swig_destroy__ = _kinova_raw.delete_TrajectoryFIFO

# Register TrajectoryFIFO in _kinova_raw:
_kinova_raw.TrajectoryFIFO_swigregister(TrajectoryFIFO)

class SingularityVector(object):
    r"""Proxy of C++ SingularityVector class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TranslationSingularityCount = property(_kinova_raw.SingularityVector_TranslationSingularityCount_get, _kinova_raw.SingularityVector_TranslationSingularityCount_set, doc=r"""TranslationSingularityCount : int""")
    OrientationSingularityCount = property(_kinova_raw.SingularityVector_OrientationSingularityCount_get, _kinova_raw.SingularityVector_OrientationSingularityCount_set, doc=r"""OrientationSingularityCount : int""")
    TranslationSingularityDistance = property(_kinova_raw.SingularityVector_TranslationSingularityDistance_get, _kinova_raw.SingularityVector_TranslationSingularityDistance_set, doc=r"""TranslationSingularityDistance : float""")
    OrientationSingularityDistance = property(_kinova_raw.SingularityVector_OrientationSingularityDistance_get, _kinova_raw.SingularityVector_OrientationSingularityDistance_set, doc=r"""OrientationSingularityDistance : float""")
    RepulsionVector = property(_kinova_raw.SingularityVector_RepulsionVector_get, _kinova_raw.SingularityVector_RepulsionVector_set, doc=r"""RepulsionVector : CartesianInfo""")

    def __init__(self):
        r"""__init__(SingularityVector self) -> SingularityVector"""
        _kinova_raw.SingularityVector_swiginit(self, _kinova_raw.new_SingularityVector())
    __swig_destroy__ = _kinova_raw.delete_SingularityVector

# Register SingularityVector in _kinova_raw:
_kinova_raw.SingularityVector_swigregister(SingularityVector)

class JoystickCommand(object):
    r"""Proxy of C++ JoystickCommand class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ButtonValue = property(_kinova_raw.JoystickCommand_ButtonValue_get, _kinova_raw.JoystickCommand_ButtonValue_set, doc=r"""ButtonValue : a(16).short""")
    InclineLeftRight = property(_kinova_raw.JoystickCommand_InclineLeftRight_get, _kinova_raw.JoystickCommand_InclineLeftRight_set, doc=r"""InclineLeftRight : float""")
    InclineForwardBackward = property(_kinova_raw.JoystickCommand_InclineForwardBackward_get, _kinova_raw.JoystickCommand_InclineForwardBackward_set, doc=r"""InclineForwardBackward : float""")
    Rotate = property(_kinova_raw.JoystickCommand_Rotate_get, _kinova_raw.JoystickCommand_Rotate_set, doc=r"""Rotate : float""")
    MoveLeftRight = property(_kinova_raw.JoystickCommand_MoveLeftRight_get, _kinova_raw.JoystickCommand_MoveLeftRight_set, doc=r"""MoveLeftRight : float""")
    MoveForwardBackward = property(_kinova_raw.JoystickCommand_MoveForwardBackward_get, _kinova_raw.JoystickCommand_MoveForwardBackward_set, doc=r"""MoveForwardBackward : float""")
    PushPull = property(_kinova_raw.JoystickCommand_PushPull_get, _kinova_raw.JoystickCommand_PushPull_set, doc=r"""PushPull : float""")

    def InitStruct(self) -> "void":
        r"""InitStruct(JoystickCommand self)"""
        return _kinova_raw.JoystickCommand_InitStruct(self)

    def __init__(self):
        r"""__init__(JoystickCommand self) -> JoystickCommand"""
        _kinova_raw.JoystickCommand_swiginit(self, _kinova_raw.new_JoystickCommand())
    __swig_destroy__ = _kinova_raw.delete_JoystickCommand

# Register JoystickCommand in _kinova_raw:
_kinova_raw.JoystickCommand_swigregister(JoystickCommand)

class ClientConfigurations(object):
    r"""Proxy of C++ ClientConfigurations class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ClientID = property(_kinova_raw.ClientConfigurations_ClientID_get, _kinova_raw.ClientConfigurations_ClientID_set, doc=r"""ClientID : a(20).char""")
    ClientName = property(_kinova_raw.ClientConfigurations_ClientName_get, _kinova_raw.ClientConfigurations_ClientName_set, doc=r"""ClientName : a(20).char""")
    Organization = property(_kinova_raw.ClientConfigurations_Organization_get, _kinova_raw.ClientConfigurations_Organization_set, doc=r"""Organization : a(20).char""")
    Serial = property(_kinova_raw.ClientConfigurations_Serial_get, _kinova_raw.ClientConfigurations_Serial_set, doc=r"""Serial : a(20).char""")
    Model = property(_kinova_raw.ClientConfigurations_Model_get, _kinova_raw.ClientConfigurations_Model_set, doc=r"""Model : a(20).char""")
    Laterality = property(_kinova_raw.ClientConfigurations_Laterality_get, _kinova_raw.ClientConfigurations_Laterality_set, doc=r"""Laterality : ArmLaterality""")
    MaxTranslationVelocity = property(_kinova_raw.ClientConfigurations_MaxTranslationVelocity_get, _kinova_raw.ClientConfigurations_MaxTranslationVelocity_set, doc=r"""MaxTranslationVelocity : float""")
    MaxOrientationVelocity = property(_kinova_raw.ClientConfigurations_MaxOrientationVelocity_get, _kinova_raw.ClientConfigurations_MaxOrientationVelocity_set, doc=r"""MaxOrientationVelocity : float""")
    MaxTranslationAcceleration = property(_kinova_raw.ClientConfigurations_MaxTranslationAcceleration_get, _kinova_raw.ClientConfigurations_MaxTranslationAcceleration_set, doc=r"""MaxTranslationAcceleration : float""")
    MaxOrientationAcceleration = property(_kinova_raw.ClientConfigurations_MaxOrientationAcceleration_get, _kinova_raw.ClientConfigurations_MaxOrientationAcceleration_set, doc=r"""MaxOrientationAcceleration : float""")
    MaxForce = property(_kinova_raw.ClientConfigurations_MaxForce_get, _kinova_raw.ClientConfigurations_MaxForce_set, doc=r"""MaxForce : float""")
    Sensibility = property(_kinova_raw.ClientConfigurations_Sensibility_get, _kinova_raw.ClientConfigurations_Sensibility_set, doc=r"""Sensibility : float""")
    DrinkingHeight = property(_kinova_raw.ClientConfigurations_DrinkingHeight_get, _kinova_raw.ClientConfigurations_DrinkingHeight_set, doc=r"""DrinkingHeight : float""")
    ComplexRetractActive = property(_kinova_raw.ClientConfigurations_ComplexRetractActive_get, _kinova_raw.ClientConfigurations_ComplexRetractActive_set, doc=r"""ComplexRetractActive : int""")
    RetractedPositionAngle = property(_kinova_raw.ClientConfigurations_RetractedPositionAngle_get, _kinova_raw.ClientConfigurations_RetractedPositionAngle_set, doc=r"""RetractedPositionAngle : float""")
    RetractedPositionCount = property(_kinova_raw.ClientConfigurations_RetractedPositionCount_get, _kinova_raw.ClientConfigurations_RetractedPositionCount_set, doc=r"""RetractedPositionCount : int""")
    RetractPositions = property(_kinova_raw.ClientConfigurations_RetractPositions_get, _kinova_raw.ClientConfigurations_RetractPositions_set, doc=r"""RetractPositions : a(20).UserPosition""")
    DrinkingDistance = property(_kinova_raw.ClientConfigurations_DrinkingDistance_get, _kinova_raw.ClientConfigurations_DrinkingDistance_set, doc=r"""DrinkingDistance : float""")
    Fingers2and3Inverted = property(_kinova_raw.ClientConfigurations_Fingers2and3Inverted_get, _kinova_raw.ClientConfigurations_Fingers2and3Inverted_set, doc=r"""Fingers2and3Inverted : int""")
    DrinkingLenght = property(_kinova_raw.ClientConfigurations_DrinkingLenght_get, _kinova_raw.ClientConfigurations_DrinkingLenght_set, doc=r"""DrinkingLenght : float""")
    DeletePreProgrammedPositionsAtRetract = property(_kinova_raw.ClientConfigurations_DeletePreProgrammedPositionsAtRetract_get, _kinova_raw.ClientConfigurations_DeletePreProgrammedPositionsAtRetract_set, doc=r"""DeletePreProgrammedPositionsAtRetract : int""")
    EnableFlashErrorLog = property(_kinova_raw.ClientConfigurations_EnableFlashErrorLog_get, _kinova_raw.ClientConfigurations_EnableFlashErrorLog_set, doc=r"""EnableFlashErrorLog : int""")
    EnableFlashPositionLog = property(_kinova_raw.ClientConfigurations_EnableFlashPositionLog_get, _kinova_raw.ClientConfigurations_EnableFlashPositionLog_set, doc=r"""EnableFlashPositionLog : int""")
    RobotConfigSelect = property(_kinova_raw.ClientConfigurations_RobotConfigSelect_get, _kinova_raw.ClientConfigurations_RobotConfigSelect_set, doc=r"""RobotConfigSelect : int""")
    TorqueSensorsEnable = property(_kinova_raw.ClientConfigurations_TorqueSensorsEnable_get, _kinova_raw.ClientConfigurations_TorqueSensorsEnable_set, doc=r"""TorqueSensorsEnable : int""")
    Expansion = property(_kinova_raw.ClientConfigurations_Expansion_get, _kinova_raw.ClientConfigurations_Expansion_set, doc=r"""Expansion : a(196).int""")

    def __init__(self):
        r"""__init__(ClientConfigurations self) -> ClientConfigurations"""
        _kinova_raw.ClientConfigurations_swiginit(self, _kinova_raw.new_ClientConfigurations())
    __swig_destroy__ = _kinova_raw.delete_ClientConfigurations

# Register ClientConfigurations in _kinova_raw:
_kinova_raw.ClientConfigurations_swigregister(ClientConfigurations)

CF_NoFunctionality = _kinova_raw.CF_NoFunctionality

CF_Disable_EnableJoystick = _kinova_raw.CF_Disable_EnableJoystick

CF_Retract_ReadyToUse = _kinova_raw.CF_Retract_ReadyToUse

CF_Change_TwoAxis_ThreeAxis = _kinova_raw.CF_Change_TwoAxis_ThreeAxis

CF_Change_DrinkingMode = _kinova_raw.CF_Change_DrinkingMode

CF_Cycle_ModeA_list = _kinova_raw.CF_Cycle_ModeA_list

CF_Cycle_ModeB_list = _kinova_raw.CF_Cycle_ModeB_list

CF_DecreaseSpeed = _kinova_raw.CF_DecreaseSpeed

CF_IncreaseSpeed = _kinova_raw.CF_IncreaseSpeed

CF_Goto_Position1 = _kinova_raw.CF_Goto_Position1

CF_Goto_Position2 = _kinova_raw.CF_Goto_Position2

CF_Goto_Position3 = _kinova_raw.CF_Goto_Position3

CF_Goto_Position4 = _kinova_raw.CF_Goto_Position4

CF_Goto_Position5 = _kinova_raw.CF_Goto_Position5

CF_RecordPosition1 = _kinova_raw.CF_RecordPosition1

CF_RecordPosition2 = _kinova_raw.CF_RecordPosition2

CF_RecordPosition3 = _kinova_raw.CF_RecordPosition3

CF_RecordPosition4 = _kinova_raw.CF_RecordPosition4

CF_RecordPosition5 = _kinova_raw.CF_RecordPosition5

CF_X_Positive = _kinova_raw.CF_X_Positive

CF_X_Negative = _kinova_raw.CF_X_Negative

CF_Y_Positive = _kinova_raw.CF_Y_Positive

CF_Y_Negative = _kinova_raw.CF_Y_Negative

CF_Z_Positive = _kinova_raw.CF_Z_Positive

CF_Z_Negative = _kinova_raw.CF_Z_Negative

CF_R_Positive = _kinova_raw.CF_R_Positive

CF_R_Negative = _kinova_raw.CF_R_Negative

CF_U_Positive = _kinova_raw.CF_U_Positive

CF_U_Negative = _kinova_raw.CF_U_Negative

CF_V_Positive = _kinova_raw.CF_V_Positive

CF_V_Negative = _kinova_raw.CF_V_Negative

CF_OpenHandOneFingers = _kinova_raw.CF_OpenHandOneFingers

CF_CloseHandOneFingers = _kinova_raw.CF_CloseHandOneFingers

CF_OpenHandTwoFingers = _kinova_raw.CF_OpenHandTwoFingers

CF_CloseHandTwoFingers = _kinova_raw.CF_CloseHandTwoFingers

CF_OpenHandThreeFingers = _kinova_raw.CF_OpenHandThreeFingers

CF_CloseHandThreeFingers = _kinova_raw.CF_CloseHandThreeFingers

CF_ForceAngularVelocity = _kinova_raw.CF_ForceAngularVelocity

CF_ForceControlStatus = _kinova_raw.CF_ForceControlStatus

CF_Trajectory = _kinova_raw.CF_Trajectory

CF_AutomaticOrientationXPlus = _kinova_raw.CF_AutomaticOrientationXPlus

CF_AutomaticOrientationXMinus = _kinova_raw.CF_AutomaticOrientationXMinus

CF_AutomaticOrientationYPlus = _kinova_raw.CF_AutomaticOrientationYPlus

CF_AutomaticOrientationYMinus = _kinova_raw.CF_AutomaticOrientationYMinus

CF_AutomaticOrientationZPlus = _kinova_raw.CF_AutomaticOrientationZPlus

CF_AutomaticOrientationZMinus = _kinova_raw.CF_AutomaticOrientationZMinus

CF_AdvanceGOTO_1 = _kinova_raw.CF_AdvanceGOTO_1

CF_AdvanceGOTO_Clear_1 = _kinova_raw.CF_AdvanceGOTO_Clear_1

CF_AdvanceGOTO_Add_1 = _kinova_raw.CF_AdvanceGOTO_Add_1

class StickEvents(object):
    r"""Proxy of C++ StickEvents class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Minus = property(_kinova_raw.StickEvents_Minus_get, _kinova_raw.StickEvents_Minus_set, doc=r"""Minus : unsigned char""")
    Plus = property(_kinova_raw.StickEvents_Plus_get, _kinova_raw.StickEvents_Plus_set, doc=r"""Plus : unsigned char""")

    def __init__(self):
        r"""__init__(StickEvents self) -> StickEvents"""
        _kinova_raw.StickEvents_swiginit(self, _kinova_raw.new_StickEvents())
    __swig_destroy__ = _kinova_raw.delete_StickEvents

# Register StickEvents in _kinova_raw:
_kinova_raw.StickEvents_swigregister(StickEvents)

class ButtonEvents(object):
    r"""Proxy of C++ ButtonEvents class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    OneClick = property(_kinova_raw.ButtonEvents_OneClick_get, _kinova_raw.ButtonEvents_OneClick_set, doc=r"""OneClick : unsigned char""")
    TwoClick = property(_kinova_raw.ButtonEvents_TwoClick_get, _kinova_raw.ButtonEvents_TwoClick_set, doc=r"""TwoClick : unsigned char""")
    HoldOneSec = property(_kinova_raw.ButtonEvents_HoldOneSec_get, _kinova_raw.ButtonEvents_HoldOneSec_set, doc=r"""HoldOneSec : unsigned char""")
    HoldTwoSec = property(_kinova_raw.ButtonEvents_HoldTwoSec_get, _kinova_raw.ButtonEvents_HoldTwoSec_set, doc=r"""HoldTwoSec : unsigned char""")
    HoldThreeSec = property(_kinova_raw.ButtonEvents_HoldThreeSec_get, _kinova_raw.ButtonEvents_HoldThreeSec_set, doc=r"""HoldThreeSec : unsigned char""")
    HoldFourSec = property(_kinova_raw.ButtonEvents_HoldFourSec_get, _kinova_raw.ButtonEvents_HoldFourSec_set, doc=r"""HoldFourSec : unsigned char""")
    HoldDown = property(_kinova_raw.ButtonEvents_HoldDown_get, _kinova_raw.ButtonEvents_HoldDown_set, doc=r"""HoldDown : unsigned char""")

    def __init__(self):
        r"""__init__(ButtonEvents self) -> ButtonEvents"""
        _kinova_raw.ButtonEvents_swiginit(self, _kinova_raw.new_ButtonEvents())
    __swig_destroy__ = _kinova_raw.delete_ButtonEvents

# Register ButtonEvents in _kinova_raw:
_kinova_raw.ButtonEvents_swigregister(ButtonEvents)

OneAxis = _kinova_raw.OneAxis

TwoAxis = _kinova_raw.TwoAxis

ThreeAxis = _kinova_raw.ThreeAxis

SixAxis = _kinova_raw.SixAxis

class ControlsModeMap(object):
    r"""Proxy of C++ ControlsModeMap class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    DiagonalsLocked = property(_kinova_raw.ControlsModeMap_DiagonalsLocked_get, _kinova_raw.ControlsModeMap_DiagonalsLocked_set, doc=r"""DiagonalsLocked : int""")
    Expansion = property(_kinova_raw.ControlsModeMap_Expansion_get, _kinova_raw.ControlsModeMap_Expansion_set, doc=r"""Expansion : int""")
    ControlSticks = property(_kinova_raw.ControlsModeMap_ControlSticks_get, _kinova_raw.ControlsModeMap_ControlSticks_set, doc=r"""ControlSticks : a(6).StickEvents""")
    ControlButtons = property(_kinova_raw.ControlsModeMap_ControlButtons_get, _kinova_raw.ControlsModeMap_ControlButtons_set, doc=r"""ControlButtons : a(26).ButtonEvents""")

    def __init__(self):
        r"""__init__(ControlsModeMap self) -> ControlsModeMap"""
        _kinova_raw.ControlsModeMap_swiginit(self, _kinova_raw.new_ControlsModeMap())
    __swig_destroy__ = _kinova_raw.delete_ControlsModeMap

# Register ControlsModeMap in _kinova_raw:
_kinova_raw.ControlsModeMap_swigregister(ControlsModeMap)

class ControlMapping(object):
    r"""Proxy of C++ ControlMapping class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NumOfModesA = property(_kinova_raw.ControlMapping_NumOfModesA_get, _kinova_raw.ControlMapping_NumOfModesA_set, doc=r"""NumOfModesA : int""")
    NumOfModesB = property(_kinova_raw.ControlMapping_NumOfModesB_get, _kinova_raw.ControlMapping_NumOfModesB_set, doc=r"""NumOfModesB : int""")
    ActualModeA = property(_kinova_raw.ControlMapping_ActualModeA_get, _kinova_raw.ControlMapping_ActualModeA_set, doc=r"""ActualModeA : int""")
    ActualModeB = property(_kinova_raw.ControlMapping_ActualModeB_get, _kinova_raw.ControlMapping_ActualModeB_set, doc=r"""ActualModeB : int""")
    Mode = property(_kinova_raw.ControlMapping_Mode_get, _kinova_raw.ControlMapping_Mode_set, doc=r"""Mode : ControlMappingMode""")
    ModeControlsA = property(_kinova_raw.ControlMapping_ModeControlsA_get, _kinova_raw.ControlMapping_ModeControlsA_set, doc=r"""ModeControlsA : a(6).ControlsModeMap""")
    ModeControlsB = property(_kinova_raw.ControlMapping_ModeControlsB_get, _kinova_raw.ControlMapping_ModeControlsB_set, doc=r"""ModeControlsB : a(6).ControlsModeMap""")

    def __init__(self):
        r"""__init__(ControlMapping self) -> ControlMapping"""
        _kinova_raw.ControlMapping_swiginit(self, _kinova_raw.new_ControlMapping())
    __swig_destroy__ = _kinova_raw.delete_ControlMapping

# Register ControlMapping in _kinova_raw:
_kinova_raw.ControlMapping_swigregister(ControlMapping)

class ControlMappingCharts(object):
    r"""Proxy of C++ ControlMappingCharts class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NumOfConfiguredMapping = property(_kinova_raw.ControlMappingCharts_NumOfConfiguredMapping_get, _kinova_raw.ControlMappingCharts_NumOfConfiguredMapping_set, doc=r"""NumOfConfiguredMapping : int""")
    ActualControlMapping = property(_kinova_raw.ControlMappingCharts_ActualControlMapping_get, _kinova_raw.ControlMappingCharts_ActualControlMapping_set, doc=r"""ActualControlMapping : int""")
    Mapping = property(_kinova_raw.ControlMappingCharts_Mapping_get, _kinova_raw.ControlMappingCharts_Mapping_set, doc=r"""Mapping : a(6).ControlMapping""")

    def __init__(self):
        r"""__init__(ControlMappingCharts self) -> ControlMappingCharts"""
        _kinova_raw.ControlMappingCharts_swiginit(self, _kinova_raw.new_ControlMappingCharts())
    __swig_destroy__ = _kinova_raw.delete_ControlMappingCharts

# Register ControlMappingCharts in _kinova_raw:
_kinova_raw.ControlMappingCharts_swigregister(ControlMappingCharts)

ERROR_NOTINITIALIZED = _kinova_raw.ERROR_NOTINITIALIZED

keos_err1 = _kinova_raw.keos_err1

keos_err2 = _kinova_raw.keos_err2

keos_err3 = _kinova_raw.keos_err3

User_err_start_marker = _kinova_raw.User_err_start_marker

errorlog_Actuator_Temperature = _kinova_raw.errorlog_Actuator_Temperature

errorlog_Actuator_TemperatureOK = _kinova_raw.errorlog_Actuator_TemperatureOK

errorlog_Finger_Temperature = _kinova_raw.errorlog_Finger_Temperature

errorlog_Finger_TemperatureOK = _kinova_raw.errorlog_Finger_TemperatureOK

errorlog_voltage = _kinova_raw.errorlog_voltage

errorlog_voltageOK = _kinova_raw.errorlog_voltageOK

errorlog_current_FingersClosing = _kinova_raw.errorlog_current_FingersClosing

errorlog_current_FingersOpening = _kinova_raw.errorlog_current_FingersOpening

errorlog_current_FingersOK = _kinova_raw.errorlog_current_FingersOK

errorlog_current_Actuators = _kinova_raw.errorlog_current_Actuators

errorlog_current_ActuatorsOK = _kinova_raw.errorlog_current_ActuatorsOK

errorLog_RobotStatus_Build_Incomplete = _kinova_raw.errorLog_RobotStatus_Build_Incomplete

errorLogger_END = _kinova_raw.errorLogger_END

class SystemError(object):
    r"""Proxy of C++ SystemError class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ErrorHeader = property(_kinova_raw.SystemError_ErrorHeader_get, _kinova_raw.SystemError_ErrorHeader_set, doc=r"""ErrorHeader : unsigned int""")
    ErrorType = property(_kinova_raw.SystemError_ErrorType_get, _kinova_raw.SystemError_ErrorType_set, doc=r"""ErrorType : errorLoggerType""")
    FirmwareVersion = property(_kinova_raw.SystemError_FirmwareVersion_get, _kinova_raw.SystemError_FirmwareVersion_set, doc=r"""FirmwareVersion : int""")
    KeosVersion = property(_kinova_raw.SystemError_KeosVersion_get, _kinova_raw.SystemError_KeosVersion_set, doc=r"""KeosVersion : int""")
    SystemTime = property(_kinova_raw.SystemError_SystemTime_get, _kinova_raw.SystemError_SystemTime_set, doc=r"""SystemTime : unsigned int""")
    LayerErrorStatus = property(_kinova_raw.SystemError_LayerErrorStatus_get, _kinova_raw.SystemError_LayerErrorStatus_set, doc=r"""LayerErrorStatus : a(7).bool""")
    LifeTime = property(_kinova_raw.SystemError_LifeTime_get, _kinova_raw.SystemError_LifeTime_set, doc=r"""LifeTime : int""")
    DataCount = property(_kinova_raw.SystemError_DataCount_get, _kinova_raw.SystemError_DataCount_set, doc=r"""DataCount : int""")
    Data = property(_kinova_raw.SystemError_Data_get, _kinova_raw.SystemError_Data_set, doc=r"""Data : a(50).unsigned int""")

    def __init__(self):
        r"""__init__(SystemError self) -> SystemError"""
        _kinova_raw.SystemError_swiginit(self, _kinova_raw.new_SystemError())
    __swig_destroy__ = _kinova_raw.delete_SystemError

# Register SystemError in _kinova_raw:
_kinova_raw.SystemError_swigregister(SystemError)

class ZoneLimitation(object):
    r"""Proxy of C++ ZoneLimitation class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    speedParameter1 = property(_kinova_raw.ZoneLimitation_speedParameter1_get, _kinova_raw.ZoneLimitation_speedParameter1_set, doc=r"""speedParameter1 : float""")
    speedParameter2 = property(_kinova_raw.ZoneLimitation_speedParameter2_get, _kinova_raw.ZoneLimitation_speedParameter2_set, doc=r"""speedParameter2 : float""")
    speedParameter3 = property(_kinova_raw.ZoneLimitation_speedParameter3_get, _kinova_raw.ZoneLimitation_speedParameter3_set, doc=r"""speedParameter3 : float""")
    forceParameter1 = property(_kinova_raw.ZoneLimitation_forceParameter1_get, _kinova_raw.ZoneLimitation_forceParameter1_set, doc=r"""forceParameter1 : float""")
    forceParameter2 = property(_kinova_raw.ZoneLimitation_forceParameter2_get, _kinova_raw.ZoneLimitation_forceParameter2_set, doc=r"""forceParameter2 : float""")
    forceParameter3 = property(_kinova_raw.ZoneLimitation_forceParameter3_get, _kinova_raw.ZoneLimitation_forceParameter3_set, doc=r"""forceParameter3 : float""")
    accelerationParameter1 = property(_kinova_raw.ZoneLimitation_accelerationParameter1_get, _kinova_raw.ZoneLimitation_accelerationParameter1_set, doc=r"""accelerationParameter1 : float""")
    accelerationParameter2 = property(_kinova_raw.ZoneLimitation_accelerationParameter2_get, _kinova_raw.ZoneLimitation_accelerationParameter2_set, doc=r"""accelerationParameter2 : float""")
    accelerationParameter3 = property(_kinova_raw.ZoneLimitation_accelerationParameter3_get, _kinova_raw.ZoneLimitation_accelerationParameter3_set, doc=r"""accelerationParameter3 : float""")

    def __init__(self):
        r"""__init__(ZoneLimitation self) -> ZoneLimitation"""
        _kinova_raw.ZoneLimitation_swiginit(self, _kinova_raw.new_ZoneLimitation())
    __swig_destroy__ = _kinova_raw.delete_ZoneLimitation

# Register ZoneLimitation in _kinova_raw:
_kinova_raw.ZoneLimitation_swigregister(ZoneLimitation)

PrismSquareBase_X = _kinova_raw.PrismSquareBase_X

PrismSquareBase_Y = _kinova_raw.PrismSquareBase_Y

PrismSquareBase_Z = _kinova_raw.PrismSquareBase_Z

PrismTriangularBase_X = _kinova_raw.PrismTriangularBase_X

PrismTriangularBase_Y = _kinova_raw.PrismTriangularBase_Y

PrismTriangularBase_Z = _kinova_raw.PrismTriangularBase_Z

Pyramid = _kinova_raw.Pyramid

class ForcesInfo(object):
    r"""Proxy of C++ ForcesInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    Actuator1 = property(_kinova_raw.ForcesInfo_Actuator1_get, _kinova_raw.ForcesInfo_Actuator1_set, doc=r"""Actuator1 : float""")
    Actuator2 = property(_kinova_raw.ForcesInfo_Actuator2_get, _kinova_raw.ForcesInfo_Actuator2_set, doc=r"""Actuator2 : float""")
    Actuator3 = property(_kinova_raw.ForcesInfo_Actuator3_get, _kinova_raw.ForcesInfo_Actuator3_set, doc=r"""Actuator3 : float""")
    Actuator4 = property(_kinova_raw.ForcesInfo_Actuator4_get, _kinova_raw.ForcesInfo_Actuator4_set, doc=r"""Actuator4 : float""")
    Actuator5 = property(_kinova_raw.ForcesInfo_Actuator5_get, _kinova_raw.ForcesInfo_Actuator5_set, doc=r"""Actuator5 : float""")
    Actuator6 = property(_kinova_raw.ForcesInfo_Actuator6_get, _kinova_raw.ForcesInfo_Actuator6_set, doc=r"""Actuator6 : float""")
    X = property(_kinova_raw.ForcesInfo_X_get, _kinova_raw.ForcesInfo_X_set, doc=r"""X : float""")
    Y = property(_kinova_raw.ForcesInfo_Y_get, _kinova_raw.ForcesInfo_Y_set, doc=r"""Y : float""")
    Z = property(_kinova_raw.ForcesInfo_Z_get, _kinova_raw.ForcesInfo_Z_set, doc=r"""Z : float""")
    ThetaX = property(_kinova_raw.ForcesInfo_ThetaX_get, _kinova_raw.ForcesInfo_ThetaX_set, doc=r"""ThetaX : float""")
    ThetaY = property(_kinova_raw.ForcesInfo_ThetaY_get, _kinova_raw.ForcesInfo_ThetaY_set, doc=r"""ThetaY : float""")
    ThetaZ = property(_kinova_raw.ForcesInfo_ThetaZ_get, _kinova_raw.ForcesInfo_ThetaZ_set, doc=r"""ThetaZ : float""")

    def __repr__(self) -> "char *":
        r"""__repr__(ForcesInfo self) -> char *"""
        return _kinova_raw.ForcesInfo___repr__(self)

    def __init__(self):
        r"""__init__(ForcesInfo self) -> ForcesInfo"""
        _kinova_raw.ForcesInfo_swiginit(self, _kinova_raw.new_ForcesInfo())
    __swig_destroy__ = _kinova_raw.delete_ForcesInfo

# Register ForcesInfo in _kinova_raw:
_kinova_raw.ForcesInfo_swigregister(ForcesInfo)

class QuickStatus(object):
    r"""Proxy of C++ QuickStatus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    Finger1Status = property(_kinova_raw.QuickStatus_Finger1Status_get, _kinova_raw.QuickStatus_Finger1Status_set, doc=r"""Finger1Status : unsigned char""")
    Finger2Status = property(_kinova_raw.QuickStatus_Finger2Status_get, _kinova_raw.QuickStatus_Finger2Status_set, doc=r"""Finger2Status : unsigned char""")
    Finger3Status = property(_kinova_raw.QuickStatus_Finger3Status_get, _kinova_raw.QuickStatus_Finger3Status_set, doc=r"""Finger3Status : unsigned char""")
    RetractType = property(_kinova_raw.QuickStatus_RetractType_get, _kinova_raw.QuickStatus_RetractType_set, doc=r"""RetractType : unsigned char""")
    RetractComplexity = property(_kinova_raw.QuickStatus_RetractComplexity_get, _kinova_raw.QuickStatus_RetractComplexity_set, doc=r"""RetractComplexity : unsigned char""")
    ControlEnableStatus = property(_kinova_raw.QuickStatus_ControlEnableStatus_get, _kinova_raw.QuickStatus_ControlEnableStatus_set, doc=r"""ControlEnableStatus : unsigned char""")
    ControlActiveModule = property(_kinova_raw.QuickStatus_ControlActiveModule_get, _kinova_raw.QuickStatus_ControlActiveModule_set, doc=r"""ControlActiveModule : unsigned char""")
    ControlFrameType = property(_kinova_raw.QuickStatus_ControlFrameType_get, _kinova_raw.QuickStatus_ControlFrameType_set, doc=r"""ControlFrameType : unsigned char""")
    CartesianFaultState = property(_kinova_raw.QuickStatus_CartesianFaultState_get, _kinova_raw.QuickStatus_CartesianFaultState_set, doc=r"""CartesianFaultState : unsigned char""")
    ForceControlStatus = property(_kinova_raw.QuickStatus_ForceControlStatus_get, _kinova_raw.QuickStatus_ForceControlStatus_set, doc=r"""ForceControlStatus : unsigned char""")
    CurrentLimitationStatus = property(_kinova_raw.QuickStatus_CurrentLimitationStatus_get, _kinova_raw.QuickStatus_CurrentLimitationStatus_set, doc=r"""CurrentLimitationStatus : unsigned char""")
    RobotType = property(_kinova_raw.QuickStatus_RobotType_get, _kinova_raw.QuickStatus_RobotType_set, doc=r"""RobotType : unsigned char""")
    RobotEdition = property(_kinova_raw.QuickStatus_RobotEdition_get, _kinova_raw.QuickStatus_RobotEdition_set, doc=r"""RobotEdition : unsigned char""")
    TorqueSensorsStatus = property(_kinova_raw.QuickStatus_TorqueSensorsStatus_get, _kinova_raw.QuickStatus_TorqueSensorsStatus_set, doc=r"""TorqueSensorsStatus : unsigned char""")

    def __repr__(self) -> "char *":
        r"""__repr__(QuickStatus self) -> char *"""
        return _kinova_raw.QuickStatus___repr__(self)

    def __init__(self):
        r"""__init__(QuickStatus self) -> QuickStatus"""
        _kinova_raw.QuickStatus_swiginit(self, _kinova_raw.new_QuickStatus())
    __swig_destroy__ = _kinova_raw.delete_QuickStatus

# Register QuickStatus in _kinova_raw:
_kinova_raw.QuickStatus_swigregister(QuickStatus)

class Finger(object):
    r"""Proxy of C++ Finger class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ID = property(_kinova_raw.Finger_ID_get, _kinova_raw.Finger_ID_set, doc=r"""ID : a(20).char""")
    ActualCommand = property(_kinova_raw.Finger_ActualCommand_get, _kinova_raw.Finger_ActualCommand_set, doc=r"""ActualCommand : float""")
    ActualSpeed = property(_kinova_raw.Finger_ActualSpeed_get, _kinova_raw.Finger_ActualSpeed_set, doc=r"""ActualSpeed : float""")
    ActualForce = property(_kinova_raw.Finger_ActualForce_get, _kinova_raw.Finger_ActualForce_set, doc=r"""ActualForce : float""")
    ActualAcceleration = property(_kinova_raw.Finger_ActualAcceleration_get, _kinova_raw.Finger_ActualAcceleration_set, doc=r"""ActualAcceleration : float""")
    ActualCurrent = property(_kinova_raw.Finger_ActualCurrent_get, _kinova_raw.Finger_ActualCurrent_set, doc=r"""ActualCurrent : float""")
    ActualPosition = property(_kinova_raw.Finger_ActualPosition_get, _kinova_raw.Finger_ActualPosition_set, doc=r"""ActualPosition : float""")
    ActualAverageCurrent = property(_kinova_raw.Finger_ActualAverageCurrent_get, _kinova_raw.Finger_ActualAverageCurrent_set, doc=r"""ActualAverageCurrent : float""")
    ActualTemperature = property(_kinova_raw.Finger_ActualTemperature_get, _kinova_raw.Finger_ActualTemperature_set, doc=r"""ActualTemperature : float""")
    CommunicationErrors = property(_kinova_raw.Finger_CommunicationErrors_get, _kinova_raw.Finger_CommunicationErrors_set, doc=r"""CommunicationErrors : int""")
    OscillatorTuningValue = property(_kinova_raw.Finger_OscillatorTuningValue_get, _kinova_raw.Finger_OscillatorTuningValue_set, doc=r"""OscillatorTuningValue : int""")
    CycleCount = property(_kinova_raw.Finger_CycleCount_get, _kinova_raw.Finger_CycleCount_set, doc=r"""CycleCount : float""")
    RunTime = property(_kinova_raw.Finger_RunTime_get, _kinova_raw.Finger_RunTime_set, doc=r"""RunTime : float""")
    PeakMaxTemp = property(_kinova_raw.Finger_PeakMaxTemp_get, _kinova_raw.Finger_PeakMaxTemp_set, doc=r"""PeakMaxTemp : float""")
    PeakMinTemp = property(_kinova_raw.Finger_PeakMinTemp_get, _kinova_raw.Finger_PeakMinTemp_set, doc=r"""PeakMinTemp : float""")
    PeakCurrent = property(_kinova_raw.Finger_PeakCurrent_get, _kinova_raw.Finger_PeakCurrent_set, doc=r"""PeakCurrent : float""")
    MaxSpeed = property(_kinova_raw.Finger_MaxSpeed_get, _kinova_raw.Finger_MaxSpeed_set, doc=r"""MaxSpeed : float""")
    MaxForce = property(_kinova_raw.Finger_MaxForce_get, _kinova_raw.Finger_MaxForce_set, doc=r"""MaxForce : float""")
    MaxAcceleration = property(_kinova_raw.Finger_MaxAcceleration_get, _kinova_raw.Finger_MaxAcceleration_set, doc=r"""MaxAcceleration : float""")
    MaxCurrent = property(_kinova_raw.Finger_MaxCurrent_get, _kinova_raw.Finger_MaxCurrent_set, doc=r"""MaxCurrent : float""")
    MaxAngle = property(_kinova_raw.Finger_MaxAngle_get, _kinova_raw.Finger_MaxAngle_set, doc=r"""MaxAngle : float""")
    MinAngle = property(_kinova_raw.Finger_MinAngle_get, _kinova_raw.Finger_MinAngle_set, doc=r"""MinAngle : float""")
    DeviceID = property(_kinova_raw.Finger_DeviceID_get, _kinova_raw.Finger_DeviceID_set, doc=r"""DeviceID : unsigned int""")
    CodeVersion = property(_kinova_raw.Finger_CodeVersion_get, _kinova_raw.Finger_CodeVersion_set, doc=r"""CodeVersion : unsigned int""")
    IsFingerInit = property(_kinova_raw.Finger_IsFingerInit_get, _kinova_raw.Finger_IsFingerInit_set, doc=r"""IsFingerInit : unsigned short""")
    Index = property(_kinova_raw.Finger_Index_get, _kinova_raw.Finger_Index_set, doc=r"""Index : unsigned short""")
    FingerAddress = property(_kinova_raw.Finger_FingerAddress_get, _kinova_raw.Finger_FingerAddress_set, doc=r"""FingerAddress : unsigned short""")
    IsFingerConnected = property(_kinova_raw.Finger_IsFingerConnected_get, _kinova_raw.Finger_IsFingerConnected_set, doc=r"""IsFingerConnected : unsigned short""")

    def __init__(self):
        r"""__init__(Finger self) -> Finger"""
        _kinova_raw.Finger_swiginit(self, _kinova_raw.new_Finger())
    __swig_destroy__ = _kinova_raw.delete_Finger

# Register Finger in _kinova_raw:
_kinova_raw.Finger_swigregister(Finger)

class Gripper(object):
    r"""Proxy of C++ Gripper class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Model = property(_kinova_raw.Gripper_Model_get, _kinova_raw.Gripper_Model_set, doc=r"""Model : a(20).char""")
    Fingers = property(_kinova_raw.Gripper_Fingers_get, _kinova_raw.Gripper_Fingers_set, doc=r"""Fingers : a(3).Finger""")

    def __init__(self):
        r"""__init__(Gripper self) -> Gripper"""
        _kinova_raw.Gripper_swiginit(self, _kinova_raw.new_Gripper())
    __swig_destroy__ = _kinova_raw.delete_Gripper

# Register Gripper in _kinova_raw:
_kinova_raw.Gripper_swigregister(Gripper)

class ZoneShape(object):
    r"""Proxy of C++ ZoneShape class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    shapeType = property(_kinova_raw.ZoneShape_shapeType_get, _kinova_raw.ZoneShape_shapeType_set, doc=r"""shapeType : ShapeType""")
    Expansion1 = property(_kinova_raw.ZoneShape_Expansion1_get, _kinova_raw.ZoneShape_Expansion1_set, doc=r"""Expansion1 : int""")
    Points = property(_kinova_raw.ZoneShape_Points_get, _kinova_raw.ZoneShape_Points_set, doc=r"""Points : a(8).CartesianInfo""")

    def __init__(self):
        r"""__init__(ZoneShape self) -> ZoneShape"""
        _kinova_raw.ZoneShape_swiginit(self, _kinova_raw.new_ZoneShape())
    __swig_destroy__ = _kinova_raw.delete_ZoneShape

# Register ZoneShape in _kinova_raw:
_kinova_raw.ZoneShape_swigregister(ZoneShape)

class Zone(object):
    r"""Proxy of C++ Zone class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    ID = property(_kinova_raw.Zone_ID_get, _kinova_raw.Zone_ID_set, doc=r"""ID : int""")
    Expansion1 = property(_kinova_raw.Zone_Expansion1_get, _kinova_raw.Zone_Expansion1_set, doc=r"""Expansion1 : int""")
    zoneShape = property(_kinova_raw.Zone_zoneShape_get, _kinova_raw.Zone_zoneShape_set, doc=r"""zoneShape : ZoneShape""")
    zoneLimitation = property(_kinova_raw.Zone_zoneLimitation_get, _kinova_raw.Zone_zoneLimitation_set, doc=r"""zoneLimitation : ZoneLimitation""")
    Expansion2 = property(_kinova_raw.Zone_Expansion2_get, _kinova_raw.Zone_Expansion2_set, doc=r"""Expansion2 : int""")

    def __init__(self):
        r"""__init__(Zone self) -> Zone"""
        _kinova_raw.Zone_swiginit(self, _kinova_raw.new_Zone())
    __swig_destroy__ = _kinova_raw.delete_Zone

# Register Zone in _kinova_raw:
_kinova_raw.Zone_swigregister(Zone)

class ZoneList(object):
    r"""Proxy of C++ ZoneList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    NbZones = property(_kinova_raw.ZoneList_NbZones_get, _kinova_raw.ZoneList_NbZones_set, doc=r"""NbZones : int""")
    Expansion1 = property(_kinova_raw.ZoneList_Expansion1_get, _kinova_raw.ZoneList_Expansion1_set, doc=r"""Expansion1 : int""")
    Zones = property(_kinova_raw.ZoneList_Zones_get, _kinova_raw.ZoneList_Zones_set, doc=r"""Zones : a(10).Zone""")

    def __init__(self):
        r"""__init__(ZoneList self) -> ZoneList"""
        _kinova_raw.ZoneList_swiginit(self, _kinova_raw.new_ZoneList())
    __swig_destroy__ = _kinova_raw.delete_ZoneList

# Register ZoneList in _kinova_raw:
_kinova_raw.ZoneList_swigregister(ZoneList)

class SystemStatus(object):
    r"""Proxy of C++ SystemStatus class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    JoystickActive = property(_kinova_raw.SystemStatus_JoystickActive_get, _kinova_raw.SystemStatus_JoystickActive_set, doc=r"""JoystickActive : unsigned int""")
    RetractStatus = property(_kinova_raw.SystemStatus_RetractStatus_get, _kinova_raw.SystemStatus_RetractStatus_set, doc=r"""RetractStatus : unsigned int""")
    DrinkingMode = property(_kinova_raw.SystemStatus_DrinkingMode_get, _kinova_raw.SystemStatus_DrinkingMode_set, doc=r"""DrinkingMode : unsigned int""")
    ArmLaterality = property(_kinova_raw.SystemStatus_ArmLaterality_get, _kinova_raw.SystemStatus_ArmLaterality_set, doc=r"""ArmLaterality : unsigned int""")
    TranslationActive = property(_kinova_raw.SystemStatus_TranslationActive_get, _kinova_raw.SystemStatus_TranslationActive_set, doc=r"""TranslationActive : unsigned int""")
    RotationActive = property(_kinova_raw.SystemStatus_RotationActive_get, _kinova_raw.SystemStatus_RotationActive_set, doc=r"""RotationActive : unsigned int""")
    FingersActive = property(_kinova_raw.SystemStatus_FingersActive_get, _kinova_raw.SystemStatus_FingersActive_set, doc=r"""FingersActive : unsigned int""")
    WarningOverchargeForce = property(_kinova_raw.SystemStatus_WarningOverchargeForce_get, _kinova_raw.SystemStatus_WarningOverchargeForce_set, doc=r"""WarningOverchargeForce : unsigned int""")
    WarningOverchargeFingers = property(_kinova_raw.SystemStatus_WarningOverchargeFingers_get, _kinova_raw.SystemStatus_WarningOverchargeFingers_set, doc=r"""WarningOverchargeFingers : unsigned int""")
    WarningLowVoltage = property(_kinova_raw.SystemStatus_WarningLowVoltage_get, _kinova_raw.SystemStatus_WarningLowVoltage_set, doc=r"""WarningLowVoltage : unsigned int""")
    MajorErrorOccured = property(_kinova_raw.SystemStatus_MajorErrorOccured_get, _kinova_raw.SystemStatus_MajorErrorOccured_set, doc=r"""MajorErrorOccured : unsigned int""")

    def __init__(self):
        r"""__init__(SystemStatus self) -> SystemStatus"""
        _kinova_raw.SystemStatus_swiginit(self, _kinova_raw.new_SystemStatus())
    __swig_destroy__ = _kinova_raw.delete_SystemStatus

# Register SystemStatus in _kinova_raw:
_kinova_raw.SystemStatus_swigregister(SystemStatus)

class GeneralInformations(object):
    r"""Proxy of C++ GeneralInformations class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    TimeAbsolute = property(_kinova_raw.GeneralInformations_TimeAbsolute_get, _kinova_raw.GeneralInformations_TimeAbsolute_set, doc=r"""TimeAbsolute : double""")
    TimeFromStartup = property(_kinova_raw.GeneralInformations_TimeFromStartup_get, _kinova_raw.GeneralInformations_TimeFromStartup_set, doc=r"""TimeFromStartup : double""")
    IndexStartup = property(_kinova_raw.GeneralInformations_IndexStartup_get, _kinova_raw.GeneralInformations_IndexStartup_set, doc=r"""IndexStartup : unsigned int""")
    ExpansionLong1 = property(_kinova_raw.GeneralInformations_ExpansionLong1_get, _kinova_raw.GeneralInformations_ExpansionLong1_set, doc=r"""ExpansionLong1 : int""")
    TimeStampSavings = property(_kinova_raw.GeneralInformations_TimeStampSavings_get, _kinova_raw.GeneralInformations_TimeStampSavings_set, doc=r"""TimeStampSavings : float""")
    ExpansionFloat = property(_kinova_raw.GeneralInformations_ExpansionFloat_get, _kinova_raw.GeneralInformations_ExpansionFloat_set, doc=r"""ExpansionFloat : float""")
    SupplyVoltage = property(_kinova_raw.GeneralInformations_SupplyVoltage_get, _kinova_raw.GeneralInformations_SupplyVoltage_set, doc=r"""SupplyVoltage : float""")
    TotalCurrent = property(_kinova_raw.GeneralInformations_TotalCurrent_get, _kinova_raw.GeneralInformations_TotalCurrent_set, doc=r"""TotalCurrent : float""")
    Power = property(_kinova_raw.GeneralInformations_Power_get, _kinova_raw.GeneralInformations_Power_set, doc=r"""Power : float""")
    AveragePower = property(_kinova_raw.GeneralInformations_AveragePower_get, _kinova_raw.GeneralInformations_AveragePower_set, doc=r"""AveragePower : float""")
    AccelerationX = property(_kinova_raw.GeneralInformations_AccelerationX_get, _kinova_raw.GeneralInformations_AccelerationX_set, doc=r"""AccelerationX : float""")
    AccelerationY = property(_kinova_raw.GeneralInformations_AccelerationY_get, _kinova_raw.GeneralInformations_AccelerationY_set, doc=r"""AccelerationY : float""")
    AccelerationZ = property(_kinova_raw.GeneralInformations_AccelerationZ_get, _kinova_raw.GeneralInformations_AccelerationZ_set, doc=r"""AccelerationZ : float""")
    SensorExpansion1 = property(_kinova_raw.GeneralInformations_SensorExpansion1_get, _kinova_raw.GeneralInformations_SensorExpansion1_set, doc=r"""SensorExpansion1 : float""")
    SensorExpansion2 = property(_kinova_raw.GeneralInformations_SensorExpansion2_get, _kinova_raw.GeneralInformations_SensorExpansion2_set, doc=r"""SensorExpansion2 : float""")
    SensorExpansion3 = property(_kinova_raw.GeneralInformations_SensorExpansion3_get, _kinova_raw.GeneralInformations_SensorExpansion3_set, doc=r"""SensorExpansion3 : float""")
    CodeVersion = property(_kinova_raw.GeneralInformations_CodeVersion_get, _kinova_raw.GeneralInformations_CodeVersion_set, doc=r"""CodeVersion : unsigned int""")
    CodeRevision = property(_kinova_raw.GeneralInformations_CodeRevision_get, _kinova_raw.GeneralInformations_CodeRevision_set, doc=r"""CodeRevision : unsigned int""")
    Status = property(_kinova_raw.GeneralInformations_Status_get, _kinova_raw.GeneralInformations_Status_set, doc=r"""Status : unsigned short""")
    Controller = property(_kinova_raw.GeneralInformations_Controller_get, _kinova_raw.GeneralInformations_Controller_set, doc=r"""Controller : unsigned short""")
    ControlMode = property(_kinova_raw.GeneralInformations_ControlMode_get, _kinova_raw.GeneralInformations_ControlMode_set, doc=r"""ControlMode : unsigned short""")
    HandMode = property(_kinova_raw.GeneralInformations_HandMode_get, _kinova_raw.GeneralInformations_HandMode_set, doc=r"""HandMode : unsigned short""")
    ConnectedActuatorCount = property(_kinova_raw.GeneralInformations_ConnectedActuatorCount_get, _kinova_raw.GeneralInformations_ConnectedActuatorCount_set, doc=r"""ConnectedActuatorCount : unsigned short""")
    PositionType = property(_kinova_raw.GeneralInformations_PositionType_get, _kinova_raw.GeneralInformations_PositionType_set, doc=r"""PositionType : unsigned short""")
    ErrorsSpiExpansion1 = property(_kinova_raw.GeneralInformations_ErrorsSpiExpansion1_get, _kinova_raw.GeneralInformations_ErrorsSpiExpansion1_set, doc=r"""ErrorsSpiExpansion1 : unsigned short""")
    ErrorsSpiExpansion2 = property(_kinova_raw.GeneralInformations_ErrorsSpiExpansion2_get, _kinova_raw.GeneralInformations_ErrorsSpiExpansion2_set, doc=r"""ErrorsSpiExpansion2 : unsigned short""")
    ErrorsMainSPICount = property(_kinova_raw.GeneralInformations_ErrorsMainSPICount_get, _kinova_raw.GeneralInformations_ErrorsMainSPICount_set, doc=r"""ErrorsMainSPICount : unsigned short""")
    ErrorsExternalSPICount = property(_kinova_raw.GeneralInformations_ErrorsExternalSPICount_get, _kinova_raw.GeneralInformations_ErrorsExternalSPICount_set, doc=r"""ErrorsExternalSPICount : unsigned short""")
    ErrorsMainCANCount = property(_kinova_raw.GeneralInformations_ErrorsMainCANCount_get, _kinova_raw.GeneralInformations_ErrorsMainCANCount_set, doc=r"""ErrorsMainCANCount : unsigned short""")
    ErrorsExternalCANCount = property(_kinova_raw.GeneralInformations_ErrorsExternalCANCount_get, _kinova_raw.GeneralInformations_ErrorsExternalCANCount_set, doc=r"""ErrorsExternalCANCount : unsigned short""")
    ActualSystemStatus = property(_kinova_raw.GeneralInformations_ActualSystemStatus_get, _kinova_raw.GeneralInformations_ActualSystemStatus_set, doc=r"""ActualSystemStatus : SystemStatus""")
    Position = property(_kinova_raw.GeneralInformations_Position_get, _kinova_raw.GeneralInformations_Position_set, doc=r"""Position : UserPosition""")
    Command = property(_kinova_raw.GeneralInformations_Command_get, _kinova_raw.GeneralInformations_Command_set, doc=r"""Command : UserPosition""")
    Current = property(_kinova_raw.GeneralInformations_Current_get, _kinova_raw.GeneralInformations_Current_set, doc=r"""Current : UserPosition""")
    Force = property(_kinova_raw.GeneralInformations_Force_get, _kinova_raw.GeneralInformations_Force_set, doc=r"""Force : UserPosition""")
    ActualLimitations = property(_kinova_raw.GeneralInformations_ActualLimitations_get, _kinova_raw.GeneralInformations_ActualLimitations_set, doc=r"""ActualLimitations : ZoneLimitation""")
    ControlIncrement = property(_kinova_raw.GeneralInformations_ControlIncrement_get, _kinova_raw.GeneralInformations_ControlIncrement_set, doc=r"""ControlIncrement : a(6).float""")
    FingerControlIncrement = property(_kinova_raw.GeneralInformations_FingerControlIncrement_get, _kinova_raw.GeneralInformations_FingerControlIncrement_set, doc=r"""FingerControlIncrement : a(3).float""")
    ActualJoystickCommand = property(_kinova_raw.GeneralInformations_ActualJoystickCommand_get, _kinova_raw.GeneralInformations_ActualJoystickCommand_set, doc=r"""ActualJoystickCommand : JoystickCommand""")
    PeripheralsConnected = property(_kinova_raw.GeneralInformations_PeripheralsConnected_get, _kinova_raw.GeneralInformations_PeripheralsConnected_set, doc=r"""PeripheralsConnected : a(4).unsigned int""")
    PeripheralsDeviceID = property(_kinova_raw.GeneralInformations_PeripheralsDeviceID_get, _kinova_raw.GeneralInformations_PeripheralsDeviceID_set, doc=r"""PeripheralsDeviceID : a(4).unsigned int""")
    ActuatorsTemperatures = property(_kinova_raw.GeneralInformations_ActuatorsTemperatures_get, _kinova_raw.GeneralInformations_ActuatorsTemperatures_set, doc=r"""ActuatorsTemperatures : a(6).float""")
    FingersTemperatures = property(_kinova_raw.GeneralInformations_FingersTemperatures_get, _kinova_raw.GeneralInformations_FingersTemperatures_set, doc=r"""FingersTemperatures : a(3).float""")
    FutureTemperatures = property(_kinova_raw.GeneralInformations_FutureTemperatures_get, _kinova_raw.GeneralInformations_FutureTemperatures_set, doc=r"""FutureTemperatures : a(3).float""")
    ActuatorsCommErrors = property(_kinova_raw.GeneralInformations_ActuatorsCommErrors_get, _kinova_raw.GeneralInformations_ActuatorsCommErrors_set, doc=r"""ActuatorsCommErrors : a(6).int""")
    FingersCommErrors = property(_kinova_raw.GeneralInformations_FingersCommErrors_get, _kinova_raw.GeneralInformations_FingersCommErrors_set, doc=r"""FingersCommErrors : a(3).int""")
    ExpansionLong2 = property(_kinova_raw.GeneralInformations_ExpansionLong2_get, _kinova_raw.GeneralInformations_ExpansionLong2_set, doc=r"""ExpansionLong2 : int""")
    ControlTimeAbsolute = property(_kinova_raw.GeneralInformations_ControlTimeAbsolute_get, _kinova_raw.GeneralInformations_ControlTimeAbsolute_set, doc=r"""ControlTimeAbsolute : double""")
    ControlTimeFromStartup = property(_kinova_raw.GeneralInformations_ControlTimeFromStartup_get, _kinova_raw.GeneralInformations_ControlTimeFromStartup_set, doc=r"""ControlTimeFromStartup : double""")
    ExpansionsBytes = property(_kinova_raw.GeneralInformations_ExpansionsBytes_get, _kinova_raw.GeneralInformations_ExpansionsBytes_set, doc=r"""ExpansionsBytes : a(192).unsigned char""")

    def __init__(self):
        r"""__init__(GeneralInformations self) -> GeneralInformations"""
        _kinova_raw.GeneralInformations_swiginit(self, _kinova_raw.new_GeneralInformations())
    __swig_destroy__ = _kinova_raw.delete_GeneralInformations

# Register GeneralInformations in _kinova_raw:
_kinova_raw.GeneralInformations_swigregister(GeneralInformations)

class AngularAcceleration(object):
    r"""Proxy of C++ AngularAcceleration class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Actuator1_X = property(_kinova_raw.AngularAcceleration_Actuator1_X_get, _kinova_raw.AngularAcceleration_Actuator1_X_set, doc=r"""Actuator1_X : float""")
    Actuator1_Y = property(_kinova_raw.AngularAcceleration_Actuator1_Y_get, _kinova_raw.AngularAcceleration_Actuator1_Y_set, doc=r"""Actuator1_Y : float""")
    Actuator1_Z = property(_kinova_raw.AngularAcceleration_Actuator1_Z_get, _kinova_raw.AngularAcceleration_Actuator1_Z_set, doc=r"""Actuator1_Z : float""")
    Actuator2_X = property(_kinova_raw.AngularAcceleration_Actuator2_X_get, _kinova_raw.AngularAcceleration_Actuator2_X_set, doc=r"""Actuator2_X : float""")
    Actuator2_Y = property(_kinova_raw.AngularAcceleration_Actuator2_Y_get, _kinova_raw.AngularAcceleration_Actuator2_Y_set, doc=r"""Actuator2_Y : float""")
    Actuator2_Z = property(_kinova_raw.AngularAcceleration_Actuator2_Z_get, _kinova_raw.AngularAcceleration_Actuator2_Z_set, doc=r"""Actuator2_Z : float""")
    Actuator3_X = property(_kinova_raw.AngularAcceleration_Actuator3_X_get, _kinova_raw.AngularAcceleration_Actuator3_X_set, doc=r"""Actuator3_X : float""")
    Actuator3_Y = property(_kinova_raw.AngularAcceleration_Actuator3_Y_get, _kinova_raw.AngularAcceleration_Actuator3_Y_set, doc=r"""Actuator3_Y : float""")
    Actuator3_Z = property(_kinova_raw.AngularAcceleration_Actuator3_Z_get, _kinova_raw.AngularAcceleration_Actuator3_Z_set, doc=r"""Actuator3_Z : float""")
    Actuator4_X = property(_kinova_raw.AngularAcceleration_Actuator4_X_get, _kinova_raw.AngularAcceleration_Actuator4_X_set, doc=r"""Actuator4_X : float""")
    Actuator4_Y = property(_kinova_raw.AngularAcceleration_Actuator4_Y_get, _kinova_raw.AngularAcceleration_Actuator4_Y_set, doc=r"""Actuator4_Y : float""")
    Actuator4_Z = property(_kinova_raw.AngularAcceleration_Actuator4_Z_get, _kinova_raw.AngularAcceleration_Actuator4_Z_set, doc=r"""Actuator4_Z : float""")
    Actuator5_X = property(_kinova_raw.AngularAcceleration_Actuator5_X_get, _kinova_raw.AngularAcceleration_Actuator5_X_set, doc=r"""Actuator5_X : float""")
    Actuator5_Y = property(_kinova_raw.AngularAcceleration_Actuator5_Y_get, _kinova_raw.AngularAcceleration_Actuator5_Y_set, doc=r"""Actuator5_Y : float""")
    Actuator5_Z = property(_kinova_raw.AngularAcceleration_Actuator5_Z_get, _kinova_raw.AngularAcceleration_Actuator5_Z_set, doc=r"""Actuator5_Z : float""")
    Actuator6_X = property(_kinova_raw.AngularAcceleration_Actuator6_X_get, _kinova_raw.AngularAcceleration_Actuator6_X_set, doc=r"""Actuator6_X : float""")
    Actuator6_Y = property(_kinova_raw.AngularAcceleration_Actuator6_Y_get, _kinova_raw.AngularAcceleration_Actuator6_Y_set, doc=r"""Actuator6_Y : float""")
    Actuator6_Z = property(_kinova_raw.AngularAcceleration_Actuator6_Z_get, _kinova_raw.AngularAcceleration_Actuator6_Z_set, doc=r"""Actuator6_Z : float""")

    def InitStruct(self) -> "void":
        r"""InitStruct(AngularAcceleration self)"""
        return _kinova_raw.AngularAcceleration_InitStruct(self)

    def __init__(self):
        r"""__init__(AngularAcceleration self) -> AngularAcceleration"""
        _kinova_raw.AngularAcceleration_swiginit(self, _kinova_raw.new_AngularAcceleration())
    __swig_destroy__ = _kinova_raw.delete_AngularAcceleration

# Register AngularAcceleration in _kinova_raw:
_kinova_raw.AngularAcceleration_swigregister(AngularAcceleration)

class PeripheralInfo(object):
    r"""Proxy of C++ PeripheralInfo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Handle = property(_kinova_raw.PeripheralInfo_Handle_get, _kinova_raw.PeripheralInfo_Handle_set, doc=r"""Handle : unsigned int""")
    Type = property(_kinova_raw.PeripheralInfo_Type_get, _kinova_raw.PeripheralInfo_Type_set, doc=r"""Type : unsigned int""")
    Port = property(_kinova_raw.PeripheralInfo_Port_get, _kinova_raw.PeripheralInfo_Port_set, doc=r"""Port : unsigned int""")
    Address = property(_kinova_raw.PeripheralInfo_Address_get, _kinova_raw.PeripheralInfo_Address_set, doc=r"""Address : unsigned int""")
    CodeVersion = property(_kinova_raw.PeripheralInfo_CodeVersion_get, _kinova_raw.PeripheralInfo_CodeVersion_set, doc=r"""CodeVersion : unsigned int""")

    def __init__(self):
        r"""__init__(PeripheralInfo self) -> PeripheralInfo"""
        _kinova_raw.PeripheralInfo_swiginit(self, _kinova_raw.new_PeripheralInfo())
    __swig_destroy__ = _kinova_raw.delete_PeripheralInfo

# Register PeripheralInfo in _kinova_raw:
_kinova_raw.PeripheralInfo_swigregister(PeripheralInfo)

NO_ERROR_KINOVA = _kinova_raw.NO_ERROR_KINOVA

UNKNOWN_ERROR = _kinova_raw.UNKNOWN_ERROR

ERROR_LOAD_USB_LIBRARY = _kinova_raw.ERROR_LOAD_USB_LIBRARY

ERROR_OPEN_METHOD = _kinova_raw.ERROR_OPEN_METHOD

ERROR_WRITE_METHOD = _kinova_raw.ERROR_WRITE_METHOD

ERROR_READ_METHOD = _kinova_raw.ERROR_READ_METHOD

ERROR_READ_INT_METHOD = _kinova_raw.ERROR_READ_INT_METHOD

ERROR_FREE_LIBRARY = _kinova_raw.ERROR_FREE_LIBRARY

ERROR_JACO_CONNECTION = _kinova_raw.ERROR_JACO_CONNECTION

ERROR_CLAIM_INTERFACE = _kinova_raw.ERROR_CLAIM_INTERFACE

ERROR_UNKNOWN_DEVICE = _kinova_raw.ERROR_UNKNOWN_DEVICE

ERROR_NOT_INITIALIZED = _kinova_raw.ERROR_NOT_INITIALIZED

ERROR_LIBUSB_NO_DEVICE = _kinova_raw.ERROR_LIBUSB_NO_DEVICE

ERROR_LIBUSB_BUSY = _kinova_raw.ERROR_LIBUSB_BUSY

ERROR_LIBUSB_NOT_SUPPORTED = _kinova_raw.ERROR_LIBUSB_NOT_SUPPORTED

ERROR_SENDPACKET_UNKNOWN = _kinova_raw.ERROR_SENDPACKET_UNKNOWN

ERROR_NO_DEVICE_FOUND = _kinova_raw.ERROR_NO_DEVICE_FOUND

ERROR_OPERATION_INCOMPLETED = _kinova_raw.ERROR_OPERATION_INCOMPLETED

ERROR_RS485_INVALID_HANDLE = _kinova_raw.ERROR_RS485_INVALID_HANDLE

ERROR_RS485_IO_PENDING = _kinova_raw.ERROR_RS485_IO_PENDING

ERROR_RS485_NOT_ENOUGH_MEMORY = _kinova_raw.ERROR_RS485_NOT_ENOUGH_MEMORY

ERROR_RS485_TIMEOUT = _kinova_raw.ERROR_RS485_TIMEOUT

ERROR_FUNCTION_NOT_ACCESSIBLE = _kinova_raw.ERROR_FUNCTION_NOT_ACCESSIBLE

RS485_MSG_REPORT_ERROR = _kinova_raw.RS485_MSG_REPORT_ERROR

RS485_MSG_CLEAR_FAULT_FLAG = _kinova_raw.RS485_MSG_CLEAR_FAULT_FLAG

RS485_MSG_NACK = _kinova_raw.RS485_MSG_NACK

RS485_MSG_ACK = _kinova_raw.RS485_MSG_ACK

RS485_MSG_SET_ADDRESS = _kinova_raw.RS485_MSG_SET_ADDRESS

RS485_MSG_GET_ACTUALPOSITION = _kinova_raw.RS485_MSG_GET_ACTUALPOSITION

RS485_MSG_SEND_ACTUALPOSITION = _kinova_raw.RS485_MSG_SEND_ACTUALPOSITION

RS485_MSG_STAR_ASSERV = _kinova_raw.RS485_MSG_STAR_ASSERV

RS485_MSG_STOP_ASSERV = _kinova_raw.RS485_MSG_STOP_ASSERV

RS485_MSG_FEEDTHROUGH = _kinova_raw.RS485_MSG_FEEDTHROUGH

RS485_MSG_GET_POSITION_COMMAND = _kinova_raw.RS485_MSG_GET_POSITION_COMMAND

RS485_MSG_SEND_POSITION_CURRENT = _kinova_raw.RS485_MSG_SEND_POSITION_CURRENT

RS485_MSG_GET_POSITION_COMMAND_ALL_VALUES = _kinova_raw.RS485_MSG_GET_POSITION_COMMAND_ALL_VALUES

RS485_MSG_SEND_ALL_VALUES_1 = _kinova_raw.RS485_MSG_SEND_ALL_VALUES_1

RS485_MSG_SEND_ALL_VALUES_2 = _kinova_raw.RS485_MSG_SEND_ALL_VALUES_2

RS485_MSG_SEND_ALL_VALUES_3 = _kinova_raw.RS485_MSG_SEND_ALL_VALUES_3

RS485_MSG_POSITION_MAX_MIN = _kinova_raw.RS485_MSG_POSITION_MAX_MIN

RS485_MSG_KP_GAIN = _kinova_raw.RS485_MSG_KP_GAIN

RS485_MSG_KI_KD_GAIN = _kinova_raw.RS485_MSG_KI_KD_GAIN

RS485_MSG_PROGRAM_JOINT_ZERO = _kinova_raw.RS485_MSG_PROGRAM_JOINT_ZERO

RS485_MSG_GET_CODE_VERSION = _kinova_raw.RS485_MSG_GET_CODE_VERSION

RS485_MSG_SEND_CODE_VERSION = _kinova_raw.RS485_MSG_SEND_CODE_VERSION

RS485_MSG_GET_DEVICE_INFO = _kinova_raw.RS485_MSG_GET_DEVICE_INFO

RS485_MSG_SEND_DEVICE_INFO = _kinova_raw.RS485_MSG_SEND_DEVICE_INFO

RS485_MSG_GET_TEMPERATURE = _kinova_raw.RS485_MSG_GET_TEMPERATURE

RS485_MSG_SET_TEMPERATURE = _kinova_raw.RS485_MSG_SET_TEMPERATURE

RS485_SET_PID_FILTERS = _kinova_raw.RS485_SET_PID_FILTERS

RS485_SET_ZERO_TORQUESENSOR = _kinova_raw.RS485_SET_ZERO_TORQUESENSOR

RS485_SET_GAIN_TORQUESENSOR = _kinova_raw.RS485_SET_GAIN_TORQUESENSOR

RS485_SET_CONTROL_WITH_ENCODER = _kinova_raw.RS485_SET_CONTROL_WITH_ENCODER

RS485_GET_ENCODER_STATUSSES = _kinova_raw.RS485_GET_ENCODER_STATUSSES

RS485_SET_PID_ADVANCED_PARAMETERS = _kinova_raw.RS485_SET_PID_ADVANCED_PARAMETERS

COMMUNICATION_TIME_OUT = _kinova_raw.COMMUNICATION_TIME_OUT

PACKET_SIZE = _kinova_raw.PACKET_SIZE

PACKET_DATA_SIZE = _kinova_raw.PACKET_DATA_SIZE

PACKET_HEADER_SIZE = _kinova_raw.PACKET_HEADER_SIZE

COMM_LAYER_VERSION = _kinova_raw.COMM_LAYER_VERSION

SERIAL_LENGTH = _kinova_raw.SERIAL_LENGTH

MAX_KINOVA_DEVICE = _kinova_raw.MAX_KINOVA_DEVICE

RS485_MESSAGE_SIZE = _kinova_raw.RS485_MESSAGE_SIZE

RS485_MESSAGE_MAX_COUNT = _kinova_raw.RS485_MESSAGE_MAX_COUNT

class Packet(object):
    r"""Proxy of C++ Packet class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    IdPacket = property(_kinova_raw.Packet_IdPacket_get, _kinova_raw.Packet_IdPacket_set, doc=r"""IdPacket : short""")
    TotalPacketCount = property(_kinova_raw.Packet_TotalPacketCount_get, _kinova_raw.Packet_TotalPacketCount_set, doc=r"""TotalPacketCount : short""")
    IdCommand = property(_kinova_raw.Packet_IdCommand_get, _kinova_raw.Packet_IdCommand_set, doc=r"""IdCommand : short""")
    TotalDataSize = property(_kinova_raw.Packet_TotalDataSize_get, _kinova_raw.Packet_TotalDataSize_set, doc=r"""TotalDataSize : short""")
    Data = property(_kinova_raw.Packet_Data_get, _kinova_raw.Packet_Data_set, doc=r"""Data : a(56).unsigned char""")

    def __init__(self):
        r"""__init__(Packet self) -> Packet"""
        _kinova_raw.Packet_swiginit(self, _kinova_raw.new_Packet())
    __swig_destroy__ = _kinova_raw.delete_Packet

# Register Packet in _kinova_raw:
_kinova_raw.Packet_swigregister(Packet)

class PacketList(object):
    r"""Proxy of C++ PacketList class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    packets = property(_kinova_raw.PacketList_packets_get, _kinova_raw.PacketList_packets_set, doc=r"""packets : std::vector<(Packet,std::allocator<(Packet)>)>""")

    def __init__(self):
        r"""__init__(PacketList self) -> PacketList"""
        _kinova_raw.PacketList_swiginit(self, _kinova_raw.new_PacketList())
    __swig_destroy__ = _kinova_raw.delete_PacketList

# Register PacketList in _kinova_raw:
_kinova_raw.PacketList_swigregister(PacketList)

class KinovaDevice(object):
    r"""Proxy of C++ KinovaDevice class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    SerialNumber = property(_kinova_raw.KinovaDevice_SerialNumber_get, _kinova_raw.KinovaDevice_SerialNumber_set, doc=r"""SerialNumber : a(20).char""")
    Model = property(_kinova_raw.KinovaDevice_Model_get, _kinova_raw.KinovaDevice_Model_set, doc=r"""Model : a(20).char""")
    VersionMajor = property(_kinova_raw.KinovaDevice_VersionMajor_get, _kinova_raw.KinovaDevice_VersionMajor_set, doc=r"""VersionMajor : int""")
    VersionMinor = property(_kinova_raw.KinovaDevice_VersionMinor_get, _kinova_raw.KinovaDevice_VersionMinor_set, doc=r"""VersionMinor : int""")
    VersionRelease = property(_kinova_raw.KinovaDevice_VersionRelease_get, _kinova_raw.KinovaDevice_VersionRelease_set, doc=r"""VersionRelease : int""")
    DeviceType = property(_kinova_raw.KinovaDevice_DeviceType_get, _kinova_raw.KinovaDevice_DeviceType_set, doc=r"""DeviceType : int""")
    DeviceID = property(_kinova_raw.KinovaDevice_DeviceID_get, _kinova_raw.KinovaDevice_DeviceID_set, doc=r"""DeviceID : int""")

    def __init__(self):
        r"""__init__(KinovaDevice self) -> KinovaDevice"""
        _kinova_raw.KinovaDevice_swiginit(self, _kinova_raw.new_KinovaDevice())
    __swig_destroy__ = _kinova_raw.delete_KinovaDevice

# Register KinovaDevice in _kinova_raw:
_kinova_raw.KinovaDevice_swigregister(KinovaDevice)

class RS485_Message(object):
    r"""Proxy of C++ RS485_Message class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Command = property(_kinova_raw.RS485_Message_Command_get, _kinova_raw.RS485_Message_Command_set, doc=r"""Command : short""")
    SourceAddress = property(_kinova_raw.RS485_Message_SourceAddress_get, _kinova_raw.RS485_Message_SourceAddress_set, doc=r"""SourceAddress : unsigned char""")
    DestinationAddress = property(_kinova_raw.RS485_Message_DestinationAddress_get, _kinova_raw.RS485_Message_DestinationAddress_set, doc=r"""DestinationAddress : unsigned char""")

    def __init__(self):
        r"""__init__(RS485_Message self) -> RS485_Message"""
        _kinova_raw.RS485_Message_swiginit(self, _kinova_raw.new_RS485_Message())
    __swig_destroy__ = _kinova_raw.delete_RS485_Message

# Register RS485_Message in _kinova_raw:
_kinova_raw.RS485_Message_swigregister(RS485_Message)


def InitCommunication() -> "int":
    r"""InitCommunication() -> int"""
    return _kinova_raw.InitCommunication()

def CloseCommunication() -> "int":
    r"""CloseCommunication() -> int"""
    return _kinova_raw.CloseCommunication()

def GetDeviceCount(result: 'int &') -> "int":
    r"""GetDeviceCount(int & result) -> int"""
    return _kinova_raw.GetDeviceCount(result)

def SendPacket(packetOut: 'Packet', packetIn: 'Packet', result: 'int &') -> "Packet":
    r"""SendPacket(Packet packetOut, Packet packetIn, int & result) -> Packet"""
    return _kinova_raw.SendPacket(packetOut, packetIn, result)

def ScanForNewDevice() -> "int":
    r"""ScanForNewDevice() -> int"""
    return _kinova_raw.ScanForNewDevice()

def GetActiveDevice(device: 'KinovaDevice') -> "int":
    r"""GetActiveDevice(KinovaDevice device) -> int"""
    return _kinova_raw.GetActiveDevice(device)
COMM_LAYER_PATH = _kinova_raw.COMM_LAYER_PATH

ERROR_INIT_API = _kinova_raw.ERROR_INIT_API

ERROR_LOAD_COMM_DLL = _kinova_raw.ERROR_LOAD_COMM_DLL

JACO_NACK_FIRST = _kinova_raw.JACO_NACK_FIRST

JACO_COMM_FAILED = _kinova_raw.JACO_COMM_FAILED

JACO_NACK_NORMAL = _kinova_raw.JACO_NACK_NORMAL

ERROR_INIT_COMM_METHOD = _kinova_raw.ERROR_INIT_COMM_METHOD

ERROR_CLOSE_METHOD = _kinova_raw.ERROR_CLOSE_METHOD

ERROR_GET_DEVICE_COUNT_METHOD = _kinova_raw.ERROR_GET_DEVICE_COUNT_METHOD

ERROR_SEND_PACKET_METHOD = _kinova_raw.ERROR_SEND_PACKET_METHOD

ERROR_SET_ACTIVE_DEVICE_METHOD = _kinova_raw.ERROR_SET_ACTIVE_DEVICE_METHOD

ERROR_GET_DEVICES_LIST_METHOD = _kinova_raw.ERROR_GET_DEVICES_LIST_METHOD

ERROR_SEMAPHORE_FAILED = _kinova_raw.ERROR_SEMAPHORE_FAILED

ERROR_SCAN_FOR_NEW_DEVICE = _kinova_raw.ERROR_SCAN_FOR_NEW_DEVICE

ERROR_GET_ACTIVE_DEVICE_METHOD = _kinova_raw.ERROR_GET_ACTIVE_DEVICE_METHOD

ERROR_INVALID_PARAM = _kinova_raw.ERROR_INVALID_PARAM

ERROR_API_NOT_INITIALIZED = _kinova_raw.ERROR_API_NOT_INITIALIZED

ERROR_INIT_DATA_STRUCTURES_METHOD = _kinova_raw.ERROR_INIT_DATA_STRUCTURES_METHOD

CARTESIAN_SIZE = _kinova_raw.CARTESIAN_SIZE

MAX_ACTUATORS = _kinova_raw.MAX_ACTUATORS

MAX_INVENTORY = _kinova_raw.MAX_INVENTORY

CODE_VERSION_COUNT = _kinova_raw.CODE_VERSION_COUNT

API_VERSION_COUNT = _kinova_raw.API_VERSION_COUNT

POSITION_CURRENT_COUNT = _kinova_raw.POSITION_CURRENT_COUNT

SPASM_FILTER_COUNT = _kinova_raw.SPASM_FILTER_COUNT

COMMAND_LAYER_VERSION = _kinova_raw.COMMAND_LAYER_VERSION


def GetDevices(devices: 'KinovaDevice', result: 'int &') -> "int":
    r"""GetDevices(KinovaDevice devices, int & result) -> int"""
    return _kinova_raw.GetDevices(devices, result)

def SetActiveDevice(device: 'KinovaDevice') -> "int":
    r"""SetActiveDevice(KinovaDevice device) -> int"""
    return _kinova_raw.SetActiveDevice(device)

def RefresDevicesList() -> "int":
    r"""RefresDevicesList() -> int"""
    return _kinova_raw.RefresDevicesList()

def InitAPI() -> "int":
    r"""InitAPI() -> int"""
    return _kinova_raw.InitAPI()

def CloseAPI() -> "int":
    r"""CloseAPI() -> int"""
    return _kinova_raw.CloseAPI()

def GetCodeVersion(Response: 'int [37]') -> "int":
    r"""GetCodeVersion(int [37] Response) -> int"""
    return _kinova_raw.GetCodeVersion(Response)

def GetAPIVersion(Response: 'int [3]') -> "int":
    r"""GetAPIVersion(int [3] Response) -> int"""
    return _kinova_raw.GetAPIVersion(Response)

def GetCartesianPosition(Response: 'CartesianPosition') -> "int":
    r"""GetCartesianPosition(CartesianPosition Response) -> int"""
    return _kinova_raw.GetCartesianPosition(Response)

def GetAngularPosition(Response: 'AngularPosition') -> "int":
    r"""GetAngularPosition(AngularPosition Response) -> int"""
    return _kinova_raw.GetAngularPosition(Response)

def GetCartesianForce(Response: 'CartesianPosition') -> "int":
    r"""GetCartesianForce(CartesianPosition Response) -> int"""
    return _kinova_raw.GetCartesianForce(Response)

def GetAngularForce(Response: 'AngularPosition') -> "int":
    r"""GetAngularForce(AngularPosition Response) -> int"""
    return _kinova_raw.GetAngularForce(Response)

def GetAngularCurrent(Response: 'AngularPosition') -> "int":
    r"""GetAngularCurrent(AngularPosition Response) -> int"""
    return _kinova_raw.GetAngularCurrent(Response)

def GetActualTrajectoryInfo(Response: 'TrajectoryPoint') -> "int":
    r"""GetActualTrajectoryInfo(TrajectoryPoint Response) -> int"""
    return _kinova_raw.GetActualTrajectoryInfo(Response)

def GetGlobalTrajectoryInfo(Response: 'TrajectoryFIFO') -> "int":
    r"""GetGlobalTrajectoryInfo(TrajectoryFIFO Response) -> int"""
    return _kinova_raw.GetGlobalTrajectoryInfo(Response)

def GetSensorsInfo(Response: 'SensorsInfo') -> "int":
    r"""GetSensorsInfo(SensorsInfo Response) -> int"""
    return _kinova_raw.GetSensorsInfo(Response)

def GetSingularityVector(Response: 'SingularityVector') -> "int":
    r"""GetSingularityVector(SingularityVector Response) -> int"""
    return _kinova_raw.GetSingularityVector(Response)

def SetAngularControl() -> "int":
    r"""SetAngularControl() -> int"""
    return _kinova_raw.SetAngularControl()

def SetCartesianControl() -> "int":
    r"""SetCartesianControl() -> int"""
    return _kinova_raw.SetCartesianControl()

def StartControlAPI() -> "int":
    r"""StartControlAPI() -> int"""
    return _kinova_raw.StartControlAPI()

def StopControlAPI() -> "int":
    r"""StopControlAPI() -> int"""
    return _kinova_raw.StopControlAPI()

def RestoreFactoryDefault() -> "int":
    r"""RestoreFactoryDefault() -> int"""
    return _kinova_raw.RestoreFactoryDefault()

def SendJoystickCommand(joystickCommand: 'JoystickCommand') -> "int":
    r"""SendJoystickCommand(JoystickCommand joystickCommand) -> int"""
    return _kinova_raw.SendJoystickCommand(joystickCommand)

def SendAdvanceTrajectory(trajectory: 'TrajectoryPoint') -> "int":
    r"""SendAdvanceTrajectory(TrajectoryPoint trajectory) -> int"""
    return _kinova_raw.SendAdvanceTrajectory(trajectory)

def SendBasicTrajectory(trajectory: 'TrajectoryPoint') -> "int":
    r"""SendBasicTrajectory(TrajectoryPoint trajectory) -> int"""
    return _kinova_raw.SendBasicTrajectory(trajectory)

def GetClientConfigurations(config: 'ClientConfigurations') -> "int":
    r"""GetClientConfigurations(ClientConfigurations config) -> int"""
    return _kinova_raw.GetClientConfigurations(config)

def SetClientConfigurations(config: 'ClientConfigurations') -> "int":
    r"""SetClientConfigurations(ClientConfigurations config) -> int"""
    return _kinova_raw.SetClientConfigurations(config)

def EraseAllTrajectories() -> "int":
    r"""EraseAllTrajectories() -> int"""
    return _kinova_raw.EraseAllTrajectories()

def GetPositionCurrentActuators(Response: 'float [12]') -> "int":
    r"""GetPositionCurrentActuators(float [12] Response) -> int"""
    return _kinova_raw.GetPositionCurrentActuators(Response)

def SetActuatorPID(address: 'unsigned int', P: 'float', I: 'float', D: 'float') -> "int":
    r"""SetActuatorPID(unsigned int address, float P, float I, float D) -> int"""
    return _kinova_raw.SetActuatorPID(address, P, I, D)

def GetAngularCommand(Response: 'AngularPosition') -> "int":
    r"""GetAngularCommand(AngularPosition Response) -> int"""
    return _kinova_raw.GetAngularCommand(Response)

def GetCartesianCommand(Response: 'CartesianPosition') -> "int":
    r"""GetCartesianCommand(CartesianPosition Response) -> int"""
    return _kinova_raw.GetCartesianCommand(Response)

def GetAngularCurrentMotor(Response: 'AngularPosition') -> "int":
    r"""GetAngularCurrentMotor(AngularPosition Response) -> int"""
    return _kinova_raw.GetAngularCurrentMotor(Response)

def GetAngularVelocity(Response: 'AngularPosition') -> "int":
    r"""GetAngularVelocity(AngularPosition Response) -> int"""
    return _kinova_raw.GetAngularVelocity(Response)

def GetControlType(Response: 'int &') -> "int":
    r"""GetControlType(int & Response) -> int"""
    return _kinova_raw.GetControlType(Response)

def StartCurrentLimitation() -> "int":
    r"""StartCurrentLimitation() -> int"""
    return _kinova_raw.StartCurrentLimitation()

def StopCurrentLimitation() -> "int":
    r"""StopCurrentLimitation() -> int"""
    return _kinova_raw.StopCurrentLimitation()

def GetSystemErrorCount(Response: 'unsigned int &') -> "int":
    r"""GetSystemErrorCount(unsigned int & Response) -> int"""
    return _kinova_raw.GetSystemErrorCount(Response)

def GetSystemError(indexError: 'unsigned int', Response: 'SystemError') -> "int":
    r"""GetSystemError(unsigned int indexError, SystemError Response) -> int"""
    return _kinova_raw.GetSystemError(indexError, Response)

def ClearErrorLog() -> "int":
    r"""ClearErrorLog() -> int"""
    return _kinova_raw.ClearErrorLog()

def EraseAllProtectionZones() -> "int":
    r"""EraseAllProtectionZones() -> int"""
    return _kinova_raw.EraseAllProtectionZones()

def SetSerialNumber(Command: 'char [20]', temp: 'char [20]') -> "int":
    r"""SetSerialNumber(char [20] Command, char [20] temp) -> int"""
    return _kinova_raw.SetSerialNumber(Command, temp)

def GetControlMapping(Response: 'ControlMappingCharts') -> "int":
    r"""GetControlMapping(ControlMappingCharts Response) -> int"""
    return _kinova_raw.GetControlMapping(Response)

def GetProtectionZone(Response: 'ZoneList') -> "int":
    r"""GetProtectionZone(ZoneList Response) -> int"""
    return _kinova_raw.GetProtectionZone(Response)

def SetProtectionZone(Command: 'ZoneList') -> "int":
    r"""SetProtectionZone(ZoneList Command) -> int"""
    return _kinova_raw.SetProtectionZone(Command)

def GetGripperStatus(Response: 'Gripper') -> "int":
    r"""GetGripperStatus(Gripper Response) -> int"""
    return _kinova_raw.GetGripperStatus(Response)

def GetQuickStatus(Response: 'QuickStatus') -> "int":
    r"""GetQuickStatus(QuickStatus Response) -> int"""
    return _kinova_raw.GetQuickStatus(Response)

def GetForcesInfo(Response: 'ForcesInfo') -> "int":
    r"""GetForcesInfo(ForcesInfo Response) -> int"""
    return _kinova_raw.GetForcesInfo(Response)

def SetControlMapping(Command: 'ControlMappingCharts') -> "int":
    r"""SetControlMapping(ControlMappingCharts Command) -> int"""
    return _kinova_raw.SetControlMapping(Command)

def ProgramFlash(filename: 'char const *') -> "int":
    r"""ProgramFlash(char const * filename) -> int"""
    return _kinova_raw.ProgramFlash(filename)

def SetJointZero(ActuatorAdress: 'int') -> "int":
    r"""SetJointZero(int ActuatorAdress) -> int"""
    return _kinova_raw.SetJointZero(ActuatorAdress)

def SetActuatorPIDFilter(ActuatorAdress: 'int', filterP: 'float', filterI: 'float', filterD: 'float') -> "int":
    r"""SetActuatorPIDFilter(int ActuatorAdress, float filterP, float filterI, float filterD) -> int"""
    return _kinova_raw.SetActuatorPIDFilter(ActuatorAdress, filterP, filterI, filterD)

def SetActuatorAddress(ActuatorAdress: 'int', newAddress: 'int') -> "int":
    r"""SetActuatorAddress(int ActuatorAdress, int newAddress) -> int"""
    return _kinova_raw.SetActuatorAddress(ActuatorAdress, newAddress)

def GetGeneralInformations(Response: 'GeneralInformations') -> "int":
    r"""GetGeneralInformations(GeneralInformations Response) -> int"""
    return _kinova_raw.GetGeneralInformations(Response)

def SetSpasmFilterValues(Command: 'float [1]', activationStatus: 'int') -> "int":
    r"""SetSpasmFilterValues(float [1] Command, int activationStatus) -> int"""
    return _kinova_raw.SetSpasmFilterValues(Command, activationStatus)

def GetSpasmFilterValues(Response: 'float [1]', activationStatus: 'int &') -> "int":
    r"""GetSpasmFilterValues(float [1] Response, int & activationStatus) -> int"""
    return _kinova_raw.GetSpasmFilterValues(Response, activationStatus)

def MoveHome() -> "int":
    r"""MoveHome() -> int"""
    return _kinova_raw.MoveHome()

def InitFingers() -> "int":
    r"""InitFingers() -> int"""
    return _kinova_raw.InitFingers()

def GetPeripheralInventory(list: 'PeripheralInfo') -> "int":
    r"""GetPeripheralInventory(PeripheralInfo list) -> int"""
    return _kinova_raw.GetPeripheralInventory(list)

def GetJoystickValue(joystickCommand: 'JoystickCommand') -> "int":
    r"""GetJoystickValue(JoystickCommand joystickCommand) -> int"""
    return _kinova_raw.GetJoystickValue(joystickCommand)

def GetCommandVelocity(cartesianVelocity: 'float [6]', angularVelocity: 'float [6]') -> "int":
    r"""GetCommandVelocity(float [6] cartesianVelocity, float [6] angularVelocity) -> int"""
    return _kinova_raw.GetCommandVelocity(cartesianVelocity, angularVelocity)
class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _kinova_raw.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _kinova_raw.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _kinova_raw.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _kinova_raw.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _kinova_raw.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _kinova_raw.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _kinova_raw.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _kinova_raw.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _kinova_raw.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _kinova_raw.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _kinova_raw.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _kinova_raw.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _kinova_raw.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _kinova_raw.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _kinova_raw.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _kinova_raw.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _kinova_raw.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _kinova_raw:
_kinova_raw.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(IntVector self) -> SwigPyIterator"""
        return _kinova_raw.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(IntVector self) -> bool"""
        return _kinova_raw.IntVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(IntVector self) -> bool"""
        return _kinova_raw.IntVector___bool__(self)

    def __len__(self) -> "std::vector< int >::size_type":
        r"""__len__(IntVector self) -> std::vector< int >::size_type"""
        return _kinova_raw.IntVector___len__(self)

    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        r"""__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _kinova_raw.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)
        """
        return _kinova_raw.IntVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        r"""__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _kinova_raw.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _kinova_raw.IntVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        r"""
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _kinova_raw.IntVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _kinova_raw.IntVector___setitem__(self, *args)

    def pop(self) -> "std::vector< int >::value_type":
        r"""pop(IntVector self) -> std::vector< int >::value_type"""
        return _kinova_raw.IntVector_pop(self)

    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        r"""append(IntVector self, std::vector< int >::value_type const & x)"""
        return _kinova_raw.IntVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(IntVector self) -> bool"""
        return _kinova_raw.IntVector_empty(self)

    def size(self) -> "std::vector< int >::size_type":
        r"""size(IntVector self) -> std::vector< int >::size_type"""
        return _kinova_raw.IntVector_size(self)

    def swap(self, v: 'IntVector') -> "void":
        r"""swap(IntVector self, IntVector v)"""
        return _kinova_raw.IntVector_swap(self, v)

    def begin(self) -> "std::vector< int >::iterator":
        r"""begin(IntVector self) -> std::vector< int >::iterator"""
        return _kinova_raw.IntVector_begin(self)

    def end(self) -> "std::vector< int >::iterator":
        r"""end(IntVector self) -> std::vector< int >::iterator"""
        return _kinova_raw.IntVector_end(self)

    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        r"""rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _kinova_raw.IntVector_rbegin(self)

    def rend(self) -> "std::vector< int >::reverse_iterator":
        r"""rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _kinova_raw.IntVector_rend(self)

    def clear(self) -> "void":
        r"""clear(IntVector self)"""
        return _kinova_raw.IntVector_clear(self)

    def get_allocator(self) -> "std::vector< int >::allocator_type":
        r"""get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _kinova_raw.IntVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(IntVector self)"""
        return _kinova_raw.IntVector_pop_back(self)

    def erase(self, *args) -> "std::vector< int >::iterator":
        r"""
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _kinova_raw.IntVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(IntVector self) -> IntVector
        __init__(IntVector self, IntVector other) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size) -> IntVector
        __init__(IntVector self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        _kinova_raw.IntVector_swiginit(self, _kinova_raw.new_IntVector(*args))

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        r"""push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _kinova_raw.IntVector_push_back(self, x)

    def front(self) -> "std::vector< int >::value_type const &":
        r"""front(IntVector self) -> std::vector< int >::value_type const &"""
        return _kinova_raw.IntVector_front(self)

    def back(self) -> "std::vector< int >::value_type const &":
        r"""back(IntVector self) -> std::vector< int >::value_type const &"""
        return _kinova_raw.IntVector_back(self)

    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        r"""assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _kinova_raw.IntVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _kinova_raw.IntVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _kinova_raw.IntVector_insert(self, *args)

    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        r"""reserve(IntVector self, std::vector< int >::size_type n)"""
        return _kinova_raw.IntVector_reserve(self, n)

    def capacity(self) -> "std::vector< int >::size_type":
        r"""capacity(IntVector self) -> std::vector< int >::size_type"""
        return _kinova_raw.IntVector_capacity(self)
    __swig_destroy__ = _kinova_raw.delete_IntVector

# Register IntVector in _kinova_raw:
_kinova_raw.IntVector_swigregister(IntVector)

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(DoubleVector self) -> SwigPyIterator"""
        return _kinova_raw.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(DoubleVector self) -> bool"""
        return _kinova_raw.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(DoubleVector self) -> bool"""
        return _kinova_raw.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        r"""__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _kinova_raw.DoubleVector___len__(self)

    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        r"""__getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector"""
        return _kinova_raw.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)
        """
        return _kinova_raw.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        r"""__delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _kinova_raw.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleVector self, PySliceObject * slice)
        """
        return _kinova_raw.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        r"""
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector
        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _kinova_raw.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)
        __setitem__(DoubleVector self, PySliceObject * slice)
        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _kinova_raw.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        r"""pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _kinova_raw.DoubleVector_pop(self)

    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        r"""append(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _kinova_raw.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(DoubleVector self) -> bool"""
        return _kinova_raw.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        r"""size(DoubleVector self) -> std::vector< double >::size_type"""
        return _kinova_raw.DoubleVector_size(self)

    def swap(self, v: 'DoubleVector') -> "void":
        r"""swap(DoubleVector self, DoubleVector v)"""
        return _kinova_raw.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        r"""begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _kinova_raw.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        r"""end(DoubleVector self) -> std::vector< double >::iterator"""
        return _kinova_raw.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        r"""rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _kinova_raw.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        r"""rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _kinova_raw.DoubleVector_rend(self)

    def clear(self) -> "void":
        r"""clear(DoubleVector self)"""
        return _kinova_raw.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        r"""get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _kinova_raw.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(DoubleVector self)"""
        return _kinova_raw.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        r"""
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _kinova_raw.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVector self) -> DoubleVector
        __init__(DoubleVector self, DoubleVector other) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size) -> DoubleVector
        __init__(DoubleVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector
        """
        _kinova_raw.DoubleVector_swiginit(self, _kinova_raw.new_DoubleVector(*args))

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        r"""push_back(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _kinova_raw.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        r"""front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _kinova_raw.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        r"""back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _kinova_raw.DoubleVector_back(self)

    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        r"""assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _kinova_raw.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(DoubleVector self, std::vector< double >::size_type new_size)
        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _kinova_raw.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _kinova_raw.DoubleVector_insert(self, *args)

    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        r"""reserve(DoubleVector self, std::vector< double >::size_type n)"""
        return _kinova_raw.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        r"""capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _kinova_raw.DoubleVector_capacity(self)
    __swig_destroy__ = _kinova_raw.delete_DoubleVector

# Register DoubleVector in _kinova_raw:
_kinova_raw.DoubleVector_swigregister(DoubleVector)

class FloatArray(object):
    r"""Proxy of C++ FloatArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        r"""__init__(FloatArray self, size_t nelements) -> FloatArray"""
        _kinova_raw.FloatArray_swiginit(self, _kinova_raw.new_FloatArray(nelements))
    __swig_destroy__ = _kinova_raw.delete_FloatArray

    def __getitem__(self, index: 'size_t') -> "float":
        r"""__getitem__(FloatArray self, size_t index) -> float"""
        return _kinova_raw.FloatArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'float') -> "void":
        r"""__setitem__(FloatArray self, size_t index, float value)"""
        return _kinova_raw.FloatArray___setitem__(self, index, value)

    def cast(self) -> "float *":
        r"""cast(FloatArray self) -> float *"""
        return _kinova_raw.FloatArray_cast(self)

    @staticmethod
    def frompointer(t: 'float *') -> "FloatArray *":
        r"""frompointer(float * t) -> FloatArray"""
        return _kinova_raw.FloatArray_frompointer(t)

# Register FloatArray in _kinova_raw:
_kinova_raw.FloatArray_swigregister(FloatArray)

def FloatArray_frompointer(t: 'float *') -> "FloatArray *":
    r"""FloatArray_frompointer(float * t) -> FloatArray"""
    return _kinova_raw.FloatArray_frompointer(t)

class CartesianInfoArray(object):
    r"""Proxy of C++ CartesianInfoArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        r"""__init__(CartesianInfoArray self, size_t nelements) -> CartesianInfoArray"""
        _kinova_raw.CartesianInfoArray_swiginit(self, _kinova_raw.new_CartesianInfoArray(nelements))
    __swig_destroy__ = _kinova_raw.delete_CartesianInfoArray

    def __getitem__(self, index: 'size_t') -> "CartesianInfo":
        r"""__getitem__(CartesianInfoArray self, size_t index) -> CartesianInfo"""
        return _kinova_raw.CartesianInfoArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'CartesianInfo') -> "void":
        r"""__setitem__(CartesianInfoArray self, size_t index, CartesianInfo value)"""
        return _kinova_raw.CartesianInfoArray___setitem__(self, index, value)

    def cast(self) -> "CartesianInfo *":
        r"""cast(CartesianInfoArray self) -> CartesianInfo"""
        return _kinova_raw.CartesianInfoArray_cast(self)

    @staticmethod
    def frompointer(t: 'CartesianInfo') -> "CartesianInfoArray *":
        r"""frompointer(CartesianInfo t) -> CartesianInfoArray"""
        return _kinova_raw.CartesianInfoArray_frompointer(t)

# Register CartesianInfoArray in _kinova_raw:
_kinova_raw.CartesianInfoArray_swigregister(CartesianInfoArray)

def CartesianInfoArray_frompointer(t: 'CartesianInfo') -> "CartesianInfoArray *":
    r"""CartesianInfoArray_frompointer(CartesianInfo t) -> CartesianInfoArray"""
    return _kinova_raw.CartesianInfoArray_frompointer(t)

class ZoneArray(object):
    r"""Proxy of C++ ZoneArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        r"""__init__(ZoneArray self, size_t nelements) -> ZoneArray"""
        _kinova_raw.ZoneArray_swiginit(self, _kinova_raw.new_ZoneArray(nelements))
    __swig_destroy__ = _kinova_raw.delete_ZoneArray

    def __getitem__(self, index: 'size_t') -> "Zone":
        r"""__getitem__(ZoneArray self, size_t index) -> Zone"""
        return _kinova_raw.ZoneArray___getitem__(self, index)

    def __setitem__(self, index: 'size_t', value: 'Zone') -> "void":
        r"""__setitem__(ZoneArray self, size_t index, Zone value)"""
        return _kinova_raw.ZoneArray___setitem__(self, index, value)

    def cast(self) -> "Zone *":
        r"""cast(ZoneArray self) -> Zone"""
        return _kinova_raw.ZoneArray_cast(self)

    @staticmethod
    def frompointer(t: 'Zone') -> "ZoneArray *":
        r"""frompointer(Zone t) -> ZoneArray"""
        return _kinova_raw.ZoneArray_frompointer(t)

# Register ZoneArray in _kinova_raw:
_kinova_raw.ZoneArray_swigregister(ZoneArray)

def ZoneArray_frompointer(t: 'Zone') -> "ZoneArray *":
    r"""ZoneArray_frompointer(Zone t) -> ZoneArray"""
    return _kinova_raw.ZoneArray_frompointer(t)



